name: Conventional Commits Validation

on:
  pull_request:
    types: [opened, edited, synchronize]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  validate-commits:
    name: Validate Conventional Commits
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Validate commit messages
      uses: actions/github-script@v7
      with:
        script: |
          // Get only the commits that are new in this PR
          const { data: commits } = await github.rest.pulls.listCommits({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.pull_request.number
          });

          const conventionalPattern = /^(feat|fix|docs|style|refactor|test|chore|perf|ci|build)(\(.+\))?: .{1,50}/;
          const mergePattern = /^Merge (pull request|branch)/;

          const analysis = {
            total: 0,
            conventional: 0,
            issues: []
          };

          const commitTypes = {};

          // Only validate commits that are actually new in this PR
          for (const commit of commits) {
            const message = commit.commit.message.split('\n')[0];
            analysis.total++;

            // Skip merge commits - they're automatically generated
            if (mergePattern.test(message)) {
              analysis.conventional++;
              continue;
            }

            if (conventionalPattern.test(message)) {
              analysis.conventional++;
              const type = message.split(':')[0].split('(')[0];
              commitTypes[type] = (commitTypes[type] || 0) + 1;
            } else {
              analysis.issues.push({
                sha: commit.sha.substring(0, 7),
                message: message
              });
            }
          }
          
          const typesList = Object.entries(commitTypes)
            .map(([type, count]) => `- **${type}**: ${count}`)
            .join('\n');
          
          const issuesList = analysis.issues
            .map(issue => `- \`${issue.sha}\`: ${issue.message}`)
            .join('\n');
          
          // Only fail if there are non-conventional commits in this PR
          if (analysis.issues.length > 0) {
            const failureMessage = `❌ Found ${analysis.issues.length} non-conventional commits in this PR:\n${issuesList}`;
            console.log(failureMessage);
            core.setFailed('Some commits in this PR do not follow conventional commit format');
          } else {
            console.log(`✅ All ${analysis.total} commits in this PR follow conventional format`);
          }
