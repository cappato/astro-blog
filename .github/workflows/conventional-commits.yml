name: Conventional Commits Validation

on:
  pull_request:
    types: [opened, edited, synchronize]
  push:
    branches: [main, develop]

jobs:
  validate-commits:
    name: Validate Conventional Commits
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install commitlint
      run: |
        npm install -g @commitlint/cli @commitlint/config-conventional
        
    - name: Create commitlint config
      run: |
        cat > commitlint.config.js << 'EOF'
        module.exports = {
          extends: ['@commitlint/config-conventional'],
          rules: {
            'type-enum': [
              2,
              'always',
              [
                'feat',     // New feature
                'fix',      // Bug fix
                'docs',     // Documentation
                'style',    // Formatting changes
                'refactor', // Code refactoring
                'test',     // Tests
                'chore',    // Maintenance
                'perf',     // Performance improvements
                'ci',       // CI/CD changes
                'build',    // Build system changes
                'revert'    // Revert changes
              ]
            ],
            'type-case': [2, 'always', 'lower-case'],
            'type-empty': [2, 'never'],
            'scope-case': [2, 'always', 'lower-case'],
            'subject-case': [2, 'never', ['sentence-case', 'start-case', 'pascal-case', 'upper-case']],
            'subject-empty': [2, 'never'],
            'subject-full-stop': [2, 'never', '.'],
            'header-max-length': [2, 'always', 72],
            'body-leading-blank': [1, 'always'],
            'body-max-line-length': [2, 'always', 100],
            'footer-leading-blank': [1, 'always'],
            'footer-max-line-length': [2, 'always', 100]
          }
        };
        EOF
        
    - name: Validate PR commits
      if: github.event_name == 'pull_request'
      run: |
        echo "🔍 Validating commits in PR..."
        
        # Get the base and head commits
        BASE_SHA="${{ github.event.pull_request.base.sha }}"
        HEAD_SHA="${{ github.event.pull_request.head.sha }}"
        
        # Get all commits in the PR
        COMMITS=$(git rev-list --reverse ${BASE_SHA}..${HEAD_SHA})
        
        # Validate each commit
        FAILED_COMMITS=()
        for commit in $COMMITS; do
          echo "Validating commit: $commit"
          COMMIT_MSG=$(git log --format=%B -n 1 $commit)
          
          if ! echo "$COMMIT_MSG" | npx commitlint; then
            FAILED_COMMITS+=($commit)
            echo "❌ Failed: $commit"
            echo "Message: $COMMIT_MSG"
          else
            echo "✅ Passed: $commit"
          fi
        done
        
        # Report results
        if [ ${#FAILED_COMMITS[@]} -gt 0 ]; then
          echo "❌ ${#FAILED_COMMITS[@]} commit(s) failed conventional commit validation"
          exit 1
        else
          echo "✅ All commits follow conventional commit format"
        fi
        
    - name: Validate push commits
      if: github.event_name == 'push'
      run: |
        echo "🔍 Validating pushed commits..."
        
        # For push events, validate the last commit
        COMMIT_MSG=$(git log --format=%B -n 1 HEAD)
        
        if ! echo "$COMMIT_MSG" | npx commitlint; then
          echo "❌ Latest commit failed conventional commit validation"
          echo "Message: $COMMIT_MSG"
          exit 1
        else
          echo "✅ Latest commit follows conventional commit format"
        fi

  commit-message-check:
    name: Commit Message Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Analyze commit messages
      uses: actions/github-script@v7
      with:
        script: |
          const { execSync } = require('child_process');
          
          // Get PR commits
          const baseSha = context.payload.pull_request.base.sha;
          const headSha = context.payload.pull_request.head.sha;
          
          const commits = execSync(`git rev-list --reverse ${baseSha}..${headSha}`, { encoding: 'utf8' })
            .trim().split('\n').filter(Boolean);
          
          const analysis = {
            total: commits.length,
            conventional: 0,
            types: {},
            issues: []
          };
          
          const conventionalPattern = /^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .+/;
          
          for (const commit of commits) {
            const message = execSync(`git log --format=%s -n 1 ${commit}`, { encoding: 'utf8' }).trim();
            
            if (conventionalPattern.test(message)) {
              analysis.conventional++;
              const type = message.split(':')[0].split('(')[0];
              analysis.types[type] = (analysis.types[type] || 0) + 1;
            } else {
              analysis.issues.push({
                commit: commit.substring(0, 7),
                message: message
              });
            }
          }
          
          // Create analysis comment
          const typesList = Object.entries(analysis.types)
            .map(([type, count]) => `- ${type}: ${count}`)
            .join('\n');
          
          const issuesList = analysis.issues
            .map(issue => `- \`${issue.commit}\`: ${issue.message}`)
            .join('\n');
          
          const commentBody = `## 📊 Commit Message Analysis
          
**Summary:**
- Total commits: ${analysis.total}
- Conventional commits: ${analysis.conventional}
- Compliance rate: ${Math.round((analysis.conventional / analysis.total) * 100)}%

**Commit types:**
${typesList || 'None'}

${analysis.issues.length > 0 ? `**Non-conventional commits:**
${issuesList}

**💡 Tip:** Use conventional commit format: \`type: description\`
Examples:
- \`feat: add new blog post feature\`
- \`fix: resolve navigation bug\`
- \`docs: update README\`
` : '**✅ All commits follow conventional format!**'}

*Analysis by Carlos (Carlitos) - Conventional Commits Validator* 🤖`;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
            body: commentBody
          });

  suggest-improvements:
    name: Suggest Commit Improvements
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && failure()
    needs: [validate-commits]
    
    steps:
    - name: Suggest improvements
      uses: actions/github-script@v7
      with:
        script: |
          const suggestions = `## 💡 Conventional Commit Guidelines
          
Your commits don't follow the conventional commit format. Here's how to fix them:

### ✅ Correct Format:
\`\`\`
type(scope): description

[optional body]

[optional footer]
\`\`\`

### 📋 Available Types:
- **feat**: New feature
- **fix**: Bug fix  
- **docs**: Documentation changes
- **style**: Code formatting (no logic changes)
- **refactor**: Code refactoring
- **test**: Adding or updating tests
- **chore**: Maintenance tasks
- **perf**: Performance improvements
- **ci**: CI/CD changes
- **build**: Build system changes

### 🎯 Examples:
\`\`\`
feat: add dark mode toggle
fix: resolve mobile navigation issue
docs: update installation guide
style: format code with prettier
refactor: simplify user authentication
test: add unit tests for blog component
chore: update dependencies
\`\`\`

### 🔧 How to Fix:
1. **Interactive rebase**: \`git rebase -i HEAD~n\` (where n is number of commits)
2. **Change commit messages**: Use \`reword\` option
3. **Force push**: \`git push --force-with-lease\`

*Suggestions by Carlos (Carlitos) - Commit Helper* 🤖`;

          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
            body: suggestions
          });
