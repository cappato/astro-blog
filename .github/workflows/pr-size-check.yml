name: PR Size Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  check-pr-size:
    name: Verificar Tama√±o del PR
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Verificar tama√±o del PR con casos especiales
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            const total = pr.data.additions + pr.data.deletions;
            const changedFiles = pr.data.changed_files;
            const title = pr.data.title.toLowerCase();
            const labels = pr.data.labels.map(label => label.name.toLowerCase());

            console.log(`PR #${pr.data.number}: ${total} l√≠neas, ${changedFiles} archivos`);
            console.log(`T√≠tulo: "${pr.data.title}"`);
            console.log(`Labels: [${labels.join(', ')}]`);

            // Configuraci√≥n base
            let MAX_LINES = 300;
            let MAX_FILES = 10;

            // Detectar casos especiales que permiten PRs m√°s grandes
            const isDocumentation = labels.includes('documentation') ||
                                   title.includes('docs:') ||
                                   title.includes('documentaci√≥n');

            const isRefactor = labels.includes('refactor') ||
                              title.includes('refactor') ||
                              title.includes('consolidar') ||
                              title.includes('reorganizar');

            const isStandardsWork = title.includes('est√°ndares') ||
                                   title.includes('standards') ||
                                   title.includes('reglas');

            const isMigration = title.includes('migrar') ||
                               title.includes('migration') ||
                               title.includes('migraci√≥n');

            // Aplicar l√≠mites especiales
            if (isDocumentation && (isRefactor || isStandardsWork)) {
              MAX_LINES = 500;  // Documentaci√≥n + refactor
              MAX_FILES = 15;
              console.log('üîß Caso especial detectado: Documentaci√≥n + Refactor');
              console.log(`üìè L√≠mites ajustados: ${MAX_LINES} l√≠neas, ${MAX_FILES} archivos`);
            } else if (isDocumentation) {
              MAX_LINES = 400;  // Solo documentaci√≥n
              MAX_FILES = 12;
              console.log('üìö Caso especial detectado: Documentaci√≥n');
              console.log(`üìè L√≠mites ajustados: ${MAX_LINES} l√≠neas, ${MAX_FILES} archivos`);
            } else if (isRefactor || isMigration) {
              MAX_LINES = 450;  // Refactor o migraci√≥n
              MAX_FILES = 15;
              console.log('üîÑ Caso especial detectado: Refactor/Migraci√≥n');
              console.log(`üìè L√≠mites ajustados: ${MAX_LINES} l√≠neas, ${MAX_FILES} archivos`);
            }

            // Verificar l√≠mites
            if (total > MAX_LINES || changedFiles > MAX_FILES) {
              const msg = `PR demasiado grande: ${total} l√≠neas (max: ${MAX_LINES}), ${changedFiles} archivos (max: ${MAX_FILES}).

              üí° Sugerencias:
              - Divide en PRs m√°s peque√±os
              - Para casos especiales, usa labels: 'documentation', 'refactor'
              - T√≠tulos con palabras clave: 'docs:', 'refactor', 'consolidar'`;
              core.setFailed(msg);
            } else {
              console.log(`‚úÖ PR de tama√±o apropiado (l√≠mites: ${MAX_LINES} l√≠neas, ${MAX_FILES} archivos)`);
            }
