name: PR Size Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  check-pr-size:
    name: Verificar Tama√±o del PR
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Verificar tama√±o del PR
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            const additions = pr.data.additions;
            const deletions = pr.data.deletions;
            const changedFiles = pr.data.changed_files;
            const total = additions + deletions;

            console.log(`üìä M√©tricas del PR #${pr.data.number}:`);
            console.log(`  - Archivos modificados: ${changedFiles}`);
            console.log(`  - L√≠neas agregadas: ${additions}`);
            console.log(`  - L√≠neas eliminadas: ${deletions}`);
            console.log(`  - Total de l√≠neas modificadas: ${total}`);

            // Definir l√≠mites
            const MAX_LINES = 300;
            const WARNING_LINES = 200;
            const MAX_FILES = 10;
            const WARNING_FILES = 7;

            let hasErrors = false;
            let hasWarnings = false;
            let messages = [];

            // Verificar l√≠mites de l√≠neas
            if (total > MAX_LINES) {
              hasErrors = true;
              messages.push(`‚ùå **Error**: Este PR modifica ${total} l√≠neas (m√°ximo permitido: ${MAX_LINES})`);
              messages.push(`   üìù **Acci√≥n requerida**: Divide el PR en cambios m√°s peque√±os`);
            } else if (total > WARNING_LINES) {
              hasWarnings = true;
              messages.push(`‚ö†Ô∏è **Warning**: PR grande con ${total} l√≠neas modificadas (recomendado: <${WARNING_LINES})`);
              messages.push(`   üí° **Sugerencia**: Considera dividir en PRs m√°s peque√±os si es posible`);
            }

            // Verificar l√≠mites de archivos
            if (changedFiles > MAX_FILES) {
              hasErrors = true;
              messages.push(`‚ùå **Error**: Este PR modifica ${changedFiles} archivos (m√°ximo permitido: ${MAX_FILES})`);
              messages.push(`   üìù **Acci√≥n requerida**: Divide el PR por funcionalidad`);
            } else if (changedFiles > WARNING_FILES) {
              hasWarnings = true;
              messages.push(`‚ö†Ô∏è **Warning**: PR con muchos archivos: ${changedFiles} (recomendado: <${WARNING_FILES})`);
              messages.push(`   üí° **Sugerencia**: Agrupa cambios relacionados en PRs separados`);
            }

            // Crear comentario si hay problemas
            if (hasErrors || hasWarnings) {
              const commentBody = `## üìè An√°lisis de Tama√±o del PR

${messages.join('\n')}

### üìã Buenas Pr√°cticas para PRs

#### ‚úÖ **PRs Ideales:**
- **Menos de ${WARNING_LINES} l√≠neas** modificadas
- **Menos de ${WARNING_FILES} archivos** modificados
- **Un objetivo claro** y espec√≠fico
- **Cambios at√≥micos** y relacionados

#### üîß **C√≥mo Dividir PRs Grandes:**
1. **Por funcionalidad**: Separa features independientes
2. **Por tipo**: Tests, documentaci√≥n, c√≥digo por separado
3. **Por componente**: Frontend, backend, configuraci√≥n
4. **Por dependencias**: Cambios que no dependen entre s√≠

#### üí° **Beneficios de PRs Peque√±os:**
- **Review m√°s r√°pido** y efectivo
- **Menos conflictos** de merge
- **Debugging m√°s f√°cil** si algo falla
- **Deploy m√°s seguro** con cambios incrementales

---
*Este an√°lisis es autom√°tico. Si tienes dudas sobre c√≥mo dividir el PR, pregunta en los comentarios.*`;

              // Buscar comentario existente
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number
              });

              const existingComment = comments.find(comment => 
                comment.user.login === 'github-actions[bot]' && 
                comment.body.includes('üìè An√°lisis de Tama√±o del PR')
              );

              if (existingComment) {
                // Actualizar comentario existente
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: commentBody
                });
                console.log('üìù Comentario de an√°lisis actualizado');
              } else {
                // Crear nuevo comentario
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  body: commentBody
                });
                console.log('üìù Comentario de an√°lisis creado');
              }
            }

            // Fallar el check si hay errores
            if (hasErrors) {
              core.setFailed(`PR demasiado grande: ${total} l√≠neas y ${changedFiles} archivos. Divide en PRs m√°s peque√±os.`);
            } else if (hasWarnings) {
              console.log(`‚ö†Ô∏è PR grande pero dentro de l√≠mites: ${total} l√≠neas, ${changedFiles} archivos`);
            } else {
              console.log(`‚úÖ PR de tama√±o apropiado: ${total} l√≠neas, ${changedFiles} archivos`);
            }
