name: PR Size Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  check-pr-size:
    name: Verificar Tama√±o del PR
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Verificar tama√±o del PR con casos especiales
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            const total = pr.data.additions + pr.data.deletions;
            const changedFiles = pr.data.changed_files;
            const title = pr.data.title.toLowerCase();
            const labels = pr.data.labels.map(label => label.name.toLowerCase());

            console.log(`PR #${pr.data.number}: ${total} l√≠neas, ${changedFiles} archivos`);
            console.log(`T√≠tulo: "${pr.data.title}"`);
            console.log(`Labels: [${labels.join(', ')}]`);

            // UMBRALES PROGRESIVOS BLOQUEANTES
            const sizePolicy = {
              small: {
                lines: 300,
                files: 8,
                action: 'auto-merge',
                description: 'Tama√±o ideal - auto-merge libre'
              },
              medium: {
                lines: 800,
                files: 10,
                action: 'auto-merge-warning',
                description: 'Tama√±o moderado - auto-merge con advertencia'
              },
              large: {
                lines: 1500,
                files: 15,
                action: 'auto-merge-issue',
                description: 'Tama√±o grande - auto-merge con issue de revisi√≥n'
              },
              xlarge: {
                lines: Infinity,
                files: Infinity,
                action: 'blocked',
                description: 'Tama√±o extremo - BLOQUEADO, requiere aprobaci√≥n'
              }
            };

            // Detectar casos especiales y overrides
            const hasEmergencyLabel = labels.includes('size/emergency');
            const hasMigrationLabel = labels.includes('size/migration');
            const hasDocumentationLabel = labels.includes('size/documentation');

            const isDocumentation = hasDocumentationLabel ||
                                   labels.includes('documentation') ||
                                   title.includes('docs:') ||
                                   title.includes('documentaci√≥n');

            const isRefactor = labels.includes('refactor') ||
                              title.includes('refactor') ||
                              title.includes('consolidar') ||
                              title.includes('reorganizar');

            const isMigration = hasMigrationLabel ||
                               title.includes('migrar') ||
                               title.includes('migration') ||
                               title.includes('migraci√≥n') ||
                               title.includes('reorganize') ||
                               title.includes('reorganizar') ||
                               title.includes('complete') ||
                               title.includes('completo');

            // Determinar umbral aplicable
            let currentThreshold = 'xlarge';
            let blockingThreshold = 1500; // L√≠neas que bloquean auto-merge
            let blockingFiles = 15;       // Archivos que bloquean auto-merge

            // Aplicar overrides para casos especiales
            if (hasEmergencyLabel) {
              console.log('üö® OVERRIDE: Emergency label detected - bypassing all size limits');
              blockingThreshold = Infinity;
              blockingFiles = Infinity;
            } else if (isMigration) {
              console.log('üîÑ OVERRIDE: Migration detected - relaxed limits');
              blockingThreshold = 5000;  // Migraciones pueden ser muy grandes (docs reorganization)
              blockingFiles = 30;
            } else if (isDocumentation && isRefactor) {
              console.log('üìöüîß OVERRIDE: Documentation + Refactor - relaxed limits');
              blockingThreshold = 2000;  // Docs + refactor pueden ser grandes
              blockingFiles = 20;
            } else if (isDocumentation) {
              console.log('üìö OVERRIDE: Documentation - moderately relaxed limits');
              blockingThreshold = 1200;  // Solo docs, un poco m√°s permisivo
              blockingFiles = 18;
            }

            // Determinar categor√≠a actual
            if (total <= sizePolicy.small.lines && changedFiles <= sizePolicy.small.files) {
              currentThreshold = 'small';
            } else if (total <= sizePolicy.medium.lines && changedFiles <= sizePolicy.medium.files) {
              currentThreshold = 'medium';
            } else if (total <= sizePolicy.large.lines && changedFiles <= sizePolicy.large.files) {
              currentThreshold = 'large';
            } else {
              currentThreshold = 'xlarge';
            }

            const policy = sizePolicy[currentThreshold];
            console.log(`üìä PR Categor√≠a: ${currentThreshold.toUpperCase()}`);
            console.log(`üìè ${policy.description}`);
            console.log(`üîç L√≠mite de bloqueo: ${blockingThreshold} l√≠neas, ${blockingFiles} archivos`);

            // L√ìGICA DE BLOQUEO
            const isBlocked = total > blockingThreshold || changedFiles > blockingFiles;

            if (isBlocked) {
              const msg = `PR BLOQUEADO - Tama√±o extremo: ${total} l√≠neas (max: ${blockingThreshold}), ${changedFiles} archivos (max: ${blockingFiles}). Requiere aprobaci√≥n manual. Opciones: 1) Dividir en PRs m√°s peque√±os, 2) Agregar labels: size/emergency, size/migration, size/documentation, 3) Solicitar revisi√≥n de maintainer.`;

              console.log('‚ùå BLOQUEO AUTOM√ÅTICO ACTIVADO');
              console.log(`üìä Tama√±o: ${total} l√≠neas, ${changedFiles} archivos`);
              console.log(`üö´ L√≠mites de bloqueo: ${blockingThreshold} l√≠neas, ${blockingFiles} archivos`);
              console.log('üõ°Ô∏è Este PR requiere aprobaci√≥n manual antes del auto-merge');

              core.setFailed(msg);
            } else {
              // PR permitido - generar feedback apropiado
              console.log(`‚úÖ PR PERMITIDO - Categor√≠a: ${currentThreshold.toUpperCase()}`);
              console.log(`üìä Tama√±o: ${total} l√≠neas, ${changedFiles} archivos`);

              if (currentThreshold === 'large') {
                console.log('‚ö†Ô∏è ADVERTENCIA: PR grande detectado');
                console.log('üìù Se crear√° issue autom√°tica para revisi√≥n post-merge');
                console.log('üí° Considerar dividir en PRs m√°s peque√±os en el futuro');
              } else if (currentThreshold === 'medium') {
                console.log('üí° SUGERENCIA: PR moderado');
                console.log('üîç Considerar si se puede dividir en cambios m√°s enfocados');
              } else if (currentThreshold === 'small') {
                console.log('üéØ Tama√±o ideal para revisi√≥n y mantenimiento');
              }
            }
