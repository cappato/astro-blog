name: PR Automation (Simplified)

on:
  pull_request:
    types: [opened, labeled, ready_for_review]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request && github.event.pull_request.draft == false

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Validate PR Title
      uses: actions/github-script@v7
      with:
        script: |
          // Multiple safety checks
          if (context.eventName !== 'pull_request') {
            console.log(`Event is ${context.eventName}, not pull_request. Skipping validation.`);
            return;
          }

          if (!context.payload || !context.payload.pull_request) {
            console.log('No pull_request in payload, skipping validation');
            return;
          }

          if (!context.payload.pull_request.title) {
            console.log('No title in pull_request, skipping validation');
            return;
          }

          const title = context.payload.pull_request.title.trim();
          const validPrefixes = ['feat:', 'fix:', 'docs:', 'style:', 'refactor:', 'test:', 'chore:', 'perf:', 'ci:', 'build:'];

          const hasValidPrefix = validPrefixes.some(prefix => title.toLowerCase().startsWith(prefix));

          if (!hasValidPrefix) {
            core.setFailed(`PR title "${title}" does not follow conventional commit format. Must start with one of: ${validPrefixes.join(', ')}`);
          }

          // Validate title is not too generic
          const genericTitles = ['fix: changes', 'feat: updates', 'docs: update', 'chore: misc'];
          const isGeneric = genericTitles.some(generic => title.toLowerCase() === generic);

          if (isGeneric) {
            core.setFailed(`PR title "${title}" is too generic. Please provide a more descriptive title.`);
          }





  enable-auto-merge:
    name: Enable GitHub Auto-merge
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' &&
      (github.event.action == 'opened' || github.event.action == 'labeled') &&
      contains(github.event.pull_request.labels.*.name, 'auto-merge')

    steps:
    - name: Enable GitHub Auto-merge
      uses: actions/github-script@v7
      with:
        script: |
          console.log("üîç Enabling GitHub native auto-merge...");
          console.log(`PR #${context.payload.pull_request.number}: ${context.payload.pull_request.title}`);

          try {
            // Enable auto-merge using GitHub's native feature
            await github.rest.pulls.enableAutoMerge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              merge_method: 'squash'
            });

            console.log(`‚úÖ Auto-merge enabled for PR #${context.payload.pull_request.number}`);
            console.log("üéØ GitHub will automatically merge when all checks pass");

          } catch (error) {
            console.log(`‚ùå Failed to enable auto-merge: ${error.message}`);

            if (error.status === 422) {
              console.log("   Reason: Auto-merge requirements not met (checks pending/failing)");
            } else if (error.status === 404) {
              console.log("   Reason: PR not found or insufficient permissions");
            }
          }
