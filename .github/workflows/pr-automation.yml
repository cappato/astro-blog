name: PR Automation

on:
  pull_request:
    types: [opened, edited, synchronize, ready_for_review]
  pull_request_review:
    types: [submitted]

jobs:
  pr-labeling:
    name: Auto Label PRs
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Auto Label by Branch Type
      uses: actions/github-script@v7
      with:
        script: |
          const branchName = context.payload.pull_request.head.ref;
          const labels = [];
          
          // Determine labels based on branch name
          if (branchName.startsWith('feat/')) {
            labels.push('type:feature', 'status:review-needed');
          } else if (branchName.startsWith('fix/')) {
            labels.push('type:bugfix', 'priority:high', 'status:review-needed');
          } else if (branchName.startsWith('docs/')) {
            labels.push('type:documentation', 'status:review-needed');
          } else if (branchName.startsWith('style/')) {
            labels.push('type:style', 'status:review-needed');
          } else if (branchName.startsWith('refactor/')) {
            labels.push('type:refactor', 'status:review-needed');
          } else if (branchName.startsWith('test/')) {
            labels.push('type:test', 'status:review-needed');
          } else if (branchName.startsWith('chore/')) {
            labels.push('type:chore', 'status:review-needed');
          }
          
          // Add size label based on changes
          const changedFiles = context.payload.pull_request.changed_files;
          if (changedFiles <= 5) {
            labels.push('size:small');
          } else if (changedFiles <= 15) {
            labels.push('size:medium');
          } else {
            labels.push('size:large');
          }
          
          // Apply labels
          if (labels.length > 0) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              labels: labels
            });
          }

  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Validate PR Title
      uses: actions/github-script@v7
      with:
        script: |
          const title = context.payload.pull_request.title;
          const validPrefixes = ['feat:', 'fix:', 'docs:', 'style:', 'refactor:', 'test:', 'chore:'];
          
          const hasValidPrefix = validPrefixes.some(prefix => title.toLowerCase().startsWith(prefix));
          
          if (!hasValidPrefix) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `‚ö†Ô∏è **PR Title Validation Failed**
              
              Please use conventional commit format for PR titles:
              - \`feat: description\` for new features
              - \`fix: description\` for bug fixes
              - \`docs: description\` for documentation
              - \`style: description\` for formatting changes
              - \`refactor: description\` for code refactoring
              - \`test: description\` for tests
              - \`chore: description\` for maintenance
              
              Current title: "${title}"
              
              *This comment was generated by Augment Agent - PR Automation* ü§ñ`
            });
            
            core.setFailed('PR title does not follow conventional commit format');
          }

  auto-assign-reviewers:
    name: Auto Assign Reviewers
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false && github.event.action == 'opened'
    
    steps:
    - name: Auto Assign Reviewers
      uses: actions/github-script@v7
      with:
        script: |
          const branchName = context.payload.pull_request.head.ref;
          const author = context.payload.pull_request.user.login;
          
          // Don't assign reviewers if it's a bot or automated PR
          if (author.includes('bot') || author.includes('dependabot')) {
            return;
          }
          
          // Assign reviewers based on branch type
          let reviewers = [];
          
          if (branchName.startsWith('feat/')) {
            // For features, request review from maintainers
            reviewers = ['cappato']; // Add actual usernames
          } else if (branchName.startsWith('fix/')) {
            // For fixes, urgent review needed
            reviewers = ['cappato'];
          }
          
          if (reviewers.length > 0) {
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              reviewers: reviewers
            });
          }

  pr-ready-check:
    name: PR Ready Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Check PR Readiness
      uses: actions/github-script@v7
      with:
        script: |
          const pr = context.payload.pull_request;
          const checks = [];
          
          // Check if PR has description
          if (!pr.body || pr.body.trim().length < 10) {
            checks.push('‚ùå PR needs a proper description');
          } else {
            checks.push('‚úÖ PR has description');
          }
          
          // Check if PR has linked issues
          const hasLinkedIssue = pr.body && (pr.body.includes('Closes #') || pr.body.includes('Fixes #'));
          if (hasLinkedIssue) {
            checks.push('‚úÖ PR has linked issue');
          } else {
            checks.push('‚ö†Ô∏è Consider linking related issues');
          }
          
          // Check PR size
          const changedFiles = pr.changed_files;
          if (changedFiles > 20) {
            checks.push('‚ö†Ô∏è Large PR - consider breaking into smaller PRs');
          } else {
            checks.push('‚úÖ PR size is manageable');
          }
          
          // Post readiness check comment
          const checkResults = checks.join('\n');
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pr.number,
            body: `## üîç PR Readiness Check\n\n${checkResults}\n\n*Automated check by Augment Agent - PR Automation* ü§ñ`
          });

  auto-merge-check:
    name: Auto Merge Check
    runs-on: ubuntu-latest
    needs: [pr-validation]
    if: |
      github.event.pull_request.draft == false &&
      contains(github.event.pull_request.labels.*.name, 'auto-merge') &&
      github.event.pull_request.mergeable == true
    
    steps:
    - name: Check Auto Merge Conditions
      uses: actions/github-script@v7
      with:
        script: |
          const pr = context.payload.pull_request;
          
          // Check if all required checks pass
          const { data: checks } = await github.rest.checks.listForRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: pr.head.sha
          });
          
          const allChecksPassed = checks.check_runs.every(check => 
            check.status === 'completed' && check.conclusion === 'success'
          );
          
          if (allChecksPassed && pr.mergeable) {
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              commit_title: `${pr.title} (#${pr.number})`,
              commit_message: `Automatically merged by Augment Agent ü§ñ`,
              merge_method: 'squash'
            });
            
            console.log('‚úÖ PR automatically merged');
          } else {
            console.log('‚è≥ PR not ready for auto-merge');
          }
