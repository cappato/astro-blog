name: PR Automation

on:
  pull_request:
    types: [opened, edited, synchronize, ready_for_review]
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  issues: write
  checks: read

jobs:
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Validate PR Title
      uses: actions/github-script@v7
      with:
        script: |
          const title = context.payload.pull_request.title;
          const validPrefixes = ['feat:', 'fix:', 'docs:', 'style:', 'refactor:', 'test:', 'chore:'];

          const hasValidPrefix = validPrefixes.some(prefix => title.toLowerCase().startsWith(prefix));

          if (!hasValidPrefix) {
            core.setFailed('PR title does not follow conventional commit format');
          }





  auto-merge:
    name: Auto Merge
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'check_suite' && github.event.check_suite.conclusion == 'success') ||
      (github.event_name == 'pull_request' && github.event.action == 'ready_for_review') ||
      (github.event_name == 'pull_request' && github.event.action == 'synchronize') ||
      (github.event_name == 'pull_request_review' && github.event.review.state == 'approved')

    steps:
    - name: Auto Merge PR
      uses: actions/github-script@v7
      with:
        script: |
          let prs = [];

          if (context.eventName === 'pull_request' || context.eventName === 'pull_request_review') {
            // For PR events, we have direct access to the PR
            prs = [context.payload.pull_request];
          } else if (context.eventName === 'check_suite') {
            // For check_suite events, find PRs by commit SHA
            const { data: prList } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });

            // Filter PRs that include this commit
            prs = prList.filter(pr => pr.head.sha === context.payload.check_suite.head_sha);
          }

          console.log(`üîç Found ${prs.length} PR(s) to check for auto-merge`);

          for (const pr of prs) {
            console.log(`\nüîÑ Checking PR #${pr.number}: ${pr.title}`);

            // Check if PR has auto-merge label
            const hasAutoMergeLabel = pr.labels.some(label => label.name === 'auto-merge');
            console.log(`  - Has auto-merge label: ${hasAutoMergeLabel}`);
            console.log(`  - Is draft: ${pr.draft}`);
            console.log(`  - Mergeable: ${pr.mergeable}`);

            if (!hasAutoMergeLabel || pr.draft) {
              console.log(`‚è≠Ô∏è Skipping PR #${pr.number} - no auto-merge label or is draft`);
              continue;
            }

            // Get all checks for this PR
            const { data: checks } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha
            });

            // Get status checks
            const { data: statuses } = await github.rest.repos.getCombinedStatusForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha
            });

            // Check if all checks passed
            const allChecksPassed = checks.check_runs.every(check =>
              check.status === 'completed' &&
              (check.conclusion === 'success' || check.conclusion === 'neutral')
            );

            const allStatusesPassed = statuses.state === 'success' || statuses.statuses.length === 0;

            console.log(`  - Check runs: ${checks.check_runs.length}`);
            console.log(`  - All checks passed: ${allChecksPassed}`);
            console.log(`  - Status state: ${statuses.state}`);
            console.log(`  - All statuses passed: ${allStatusesPassed}`);

            if (allChecksPassed && allStatusesPassed && pr.mergeable !== false) {
              try {
                await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                  commit_title: `${pr.title} (#${pr.number})`,
                  merge_method: 'squash'
                });

                console.log(`‚úÖ PR #${pr.number} automatically merged`);

                // Delete the branch
                try {
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `heads/${pr.head.ref}`
                  });
                  console.log(`üóëÔ∏è Branch ${pr.head.ref} deleted`);
                } catch (error) {
                  console.log(`‚ö†Ô∏è Could not delete branch: ${error.message}`);
                }

              } catch (error) {
                console.log(`‚ùå Failed to merge PR #${pr.number}: ${error.message}`);
              }
            } else {
              console.log(`‚è≥ PR #${pr.number} not ready for auto-merge`);
              console.log(`  - Checks passed: ${allChecksPassed}`);
              console.log(`  - Statuses passed: ${allStatusesPassed}`);
              console.log(`  - Mergeable: ${pr.mergeable}`);
            }
          }
