name: Automated Testing Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: npm run test:unit
      continue-on-error: false
      
    - name: Upload unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: coverage/

  build-only:
    name: Build Only (Fast)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run build (essential check)
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/

  integration-tests:
    name: Integration Tests (Optional)
    runs-on: ubuntu-latest
    needs: build-only
    continue-on-error: true  # Don't block auto-merge if this fails

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: dist/

    - name: Test build artifacts
      run: npm run test:build

    - name: Test XML validation
      run: npm run test:xml

    - name: Test content validation
      run: npm run test:content

    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: test-results/

  endpoint-tests:
    name: Endpoint Tests
    runs-on: ubuntu-latest
    needs: build-only
    continue-on-error: true  # Don't block auto-merge if this fails
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run endpoint tests
      run: npm run test:endpoints || echo "Endpoint tests had some failures but continuing..."
      timeout-minutes: 10
      continue-on-error: true
      
    - name: Upload endpoint test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: endpoint-test-results
        path: test-results/

  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    needs: [build-only]
    continue-on-error: true  # Don't block auto-merge if this fails
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        
    - name: Check file sizes
      run: |
        echo "=== Build Artifact Sizes ==="
        ls -lh dist/
        echo "=== RSS File Size ==="
        ls -lh dist/rss.xml
        echo "=== Sitemap File Size ==="
        ls -lh dist/sitemap.xml
        echo "=== AI Metadata File Size ==="
        ls -lh dist/ai-metadata.json
        
    - name: Validate XML files
      run: |
        if command -v xmllint &> /dev/null; then
          echo "Validating RSS XML..."
          xmllint --noout dist/rss.xml
          echo "Validating Sitemap XML..."
          xmllint --noout dist/sitemap.xml
          echo "XML validation passed!"
        else
          echo "xmllint not available, skipping XML validation"
        fi
        
    - name: Validate JSON files
      run: |
        echo "Validating AI Metadata JSON..."
        python3 -m json.tool dist/ai-metadata.json > /dev/null
        echo "JSON validation passed!"

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build-only
    continue-on-error: true  # Don't block auto-merge if this fails
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        
    - name: Check build performance
      run: |
        echo "=== Build Performance Metrics ==="
        echo "Total files: $(find dist -type f | wc -l)"
        echo "Total size: $(du -sh dist | cut -f1)"
        echo "RSS size: $(stat -c%s dist/rss.xml) bytes"
        echo "Sitemap size: $(stat -c%s dist/sitemap.xml) bytes"
        echo "AI Metadata size: $(stat -c%s dist/ai-metadata.json) bytes"
        
        # Check if files are within reasonable size limits
        RSS_SIZE=$(stat -c%s dist/rss.xml)
        SITEMAP_SIZE=$(stat -c%s dist/sitemap.xml)
        AI_METADATA_SIZE=$(stat -c%s dist/ai-metadata.json)
        
        if [ $RSS_SIZE -gt 100000 ]; then
          echo "WARNING: RSS file is larger than 100KB ($RSS_SIZE bytes)"
        fi
        
        if [ $SITEMAP_SIZE -gt 50000 ]; then
          echo "WARNING: Sitemap file is larger than 50KB ($SITEMAP_SIZE bytes)"
        fi
        
        if [ $AI_METADATA_SIZE -gt 10000 ]; then
          echo "WARNING: AI Metadata file is larger than 10KB ($AI_METADATA_SIZE bytes)"
        fi

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, build-only, integration-tests, endpoint-tests, quality-checks, performance-tests]
    if: always()
    
    steps:
    - name: Test Results Summary
      run: |
        echo "=== Automated Testing Suite Results ==="
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Build Only: ${{ needs.build-only.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "Endpoint Tests: ${{ needs.endpoint-tests.result }}"
        echo "Quality Checks: ${{ needs.quality-checks.result }}"
        echo "Performance Tests: ${{ needs.performance-tests.result }}"

        # Check critical tests (build and unit tests are most important for auto-merge)
        BUILD_RESULT="${{ needs.build-only.result }}"
        UNIT_RESULT="${{ needs.unit-tests.result }}"
        QUALITY_RESULT="${{ needs.quality-checks.result }}"
        ENDPOINT_RESULT="${{ needs.endpoint-tests.result }}"
        PERF_RESULT="${{ needs.performance-tests.result }}"

        if [[ "$BUILD_RESULT" == "success" && "$UNIT_RESULT" == "success" ]]; then
          echo "‚úÖ Critical tests passed! Build and unit tests successful - auto-merge can proceed."
          if [[ "$QUALITY_RESULT" != "success" || "$ENDPOINT_RESULT" != "success" || "$PERF_RESULT" != "success" ]]; then
            echo "‚ö†Ô∏è Some optional tests had issues but auto-merge can proceed since critical tests passed."
            echo "OPTIONAL_TESTS_FAILED=true" >> $GITHUB_ENV
          fi
          exit 0
        else
          echo "‚ùå Critical tests failed. Build or unit tests failed - blocking auto-merge."
          echo "Build result: $BUILD_RESULT"
          echo "Unit tests result: $UNIT_RESULT"
          exit 1
        fi

    - name: Comment on PR if optional tests failed
      if: ${{ env.OPTIONAL_TESTS_FAILED == 'true' && github.event_name == 'pull_request' }}
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `## ‚ö†Ô∏è Optional Tests Status

          **Auto-merge proceeded** because critical tests passed, but some optional tests had issues:

          - **Unit Tests**: ${{ needs.unit-tests.result }}
          - **Integration Tests**: ${{ needs.integration-tests.result }}
          - **Endpoint Tests**: ${{ needs.endpoint-tests.result }}
          - **Quality Checks**: ${{ needs.quality-checks.result }}
          - **Performance Tests**: ${{ needs.performance-tests.result }}

          ### What this means:
          - ‚úÖ **Build successful** - Core functionality is working
          - ‚ö†Ô∏è **Optional tests failed** - Non-critical issues detected
          - üöÄ **Auto-merge proceeded** - Safe to deploy

          ### Recommended actions:
          - Review failed test logs for potential improvements
          - Consider fixing issues in follow-up PRs
          - Monitor post-merge validation results

          *This comment was generated automatically by the testing system.*`;

          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
