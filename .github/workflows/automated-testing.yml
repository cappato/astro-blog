name: Automated Testing Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Upload unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: coverage/

  build-and-integration:
    name: Build & Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run build
      run: npm run build
      
    - name: Test build artifacts
      run: npm run test:build
      
    - name: Test XML validation
      run: npm run test:xml
      
    - name: Test content validation
      run: npm run test:content
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: test-results/

  endpoint-tests:
    name: Endpoint Tests
    runs-on: ubuntu-latest
    needs: build-and-integration
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run endpoint tests
      run: npm run test:endpoints
      timeout-minutes: 10
      
    - name: Upload endpoint test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: endpoint-test-results
        path: test-results/

  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    needs: [unit-tests, build-and-integration]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        
    - name: Check file sizes
      run: |
        echo "=== Build Artifact Sizes ==="
        ls -lh dist/
        echo "=== RSS File Size ==="
        ls -lh dist/rss.xml
        echo "=== Sitemap File Size ==="
        ls -lh dist/sitemap.xml
        echo "=== AI Metadata File Size ==="
        ls -lh dist/ai-metadata.json
        
    - name: Validate XML files
      run: |
        if command -v xmllint &> /dev/null; then
          echo "Validating RSS XML..."
          xmllint --noout dist/rss.xml
          echo "Validating Sitemap XML..."
          xmllint --noout dist/sitemap.xml
          echo "XML validation passed!"
        else
          echo "xmllint not available, skipping XML validation"
        fi
        
    - name: Validate JSON files
      run: |
        echo "Validating AI Metadata JSON..."
        python3 -m json.tool dist/ai-metadata.json > /dev/null
        echo "JSON validation passed!"

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build-and-integration
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        
    - name: Check build performance
      run: |
        echo "=== Build Performance Metrics ==="
        echo "Total files: $(find dist -type f | wc -l)"
        echo "Total size: $(du -sh dist | cut -f1)"
        echo "RSS size: $(stat -c%s dist/rss.xml) bytes"
        echo "Sitemap size: $(stat -c%s dist/sitemap.xml) bytes"
        echo "AI Metadata size: $(stat -c%s dist/ai-metadata.json) bytes"
        
        # Check if files are within reasonable size limits
        RSS_SIZE=$(stat -c%s dist/rss.xml)
        SITEMAP_SIZE=$(stat -c%s dist/sitemap.xml)
        AI_METADATA_SIZE=$(stat -c%s dist/ai-metadata.json)
        
        if [ $RSS_SIZE -gt 100000 ]; then
          echo "WARNING: RSS file is larger than 100KB ($RSS_SIZE bytes)"
        fi
        
        if [ $SITEMAP_SIZE -gt 50000 ]; then
          echo "WARNING: Sitemap file is larger than 50KB ($SITEMAP_SIZE bytes)"
        fi
        
        if [ $AI_METADATA_SIZE -gt 10000 ]; then
          echo "WARNING: AI Metadata file is larger than 10KB ($AI_METADATA_SIZE bytes)"
        fi

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, build-and-integration, endpoint-tests, quality-checks, performance-tests]
    if: always()
    
    steps:
    - name: Test Results Summary
      run: |
        echo "=== Automated Testing Suite Results ==="
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Build & Integration: ${{ needs.build-and-integration.result }}"
        echo "Endpoint Tests: ${{ needs.endpoint-tests.result }}"
        echo "Quality Checks: ${{ needs.quality-checks.result }}"
        echo "Performance Tests: ${{ needs.performance-tests.result }}"
        
        if [[ "${{ needs.unit-tests.result }}" == "success" && 
              "${{ needs.build-and-integration.result }}" == "success" && 
              "${{ needs.endpoint-tests.result }}" == "success" && 
              "${{ needs.quality-checks.result }}" == "success" && 
              "${{ needs.performance-tests.result }}" == "success" ]]; then
          echo "✅ All tests passed successfully!"
          exit 0
        else
          echo "❌ Some tests failed. Check the individual job results."
          exit 1
        fi
