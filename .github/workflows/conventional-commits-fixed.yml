name: Conventional Commits Validation

on:
  pull_request:
    types: [opened, edited, synchronize]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  validate-commits:
    name: Validate Conventional Commits
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Validate commit messages
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.PAT_TOKEN || github.token }}
        script: |
          const commits = await github.rest.repos.listCommits({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.payload.pull_request.head.sha,
            per_page: 100
          });
          
          const conventionalPattern = /^(feat|fix|docs|style|refactor|test|chore|perf|ci|build)(\(.+\))?: .{1,50}/;
          const analysis = {
            total: commits.data.length,
            conventional: 0,
            issues: []
          };
          
          const commitTypes = {};
          
          for (const commit of commits.data) {
            const message = commit.commit.message.split('\n')[0];
            
            if (conventionalPattern.test(message)) {
              analysis.conventional++;
              const type = message.split(':')[0].split('(')[0];
              commitTypes[type] = (commitTypes[type] || 0) + 1;
            } else {
              analysis.issues.push({
                sha: commit.sha.substring(0, 7),
                message: message
              });
            }
          }
          
          const typesList = Object.entries(commitTypes)
            .map(([type, count]) => `- **${type}**: ${count}`)
            .join('\n');
          
          const issuesList = analysis.issues
            .map(issue => `- \`${issue.sha}\`: ${issue.message}`)
            .join('\n');
          
          const commentBody = `## üìä Commit Message Analysis\n\n**Summary:**\n- Total commits: ${analysis.total}\n- Conventional commits: ${analysis.conventional}\n- Compliance rate: ${Math.round((analysis.conventional / analysis.total) * 100)}%\n\n**Commit types:**\n${typesList || 'None'}\n\n${analysis.issues.length > 0 ? `**Non-conventional commits:**\n${issuesList}\n\n**Examples of correct format:**\n- \`feat: add new blog post feature\`\n- \`fix: resolve navigation bug\`\n- \`docs: update README\`\n` : '**‚úÖ All commits follow conventional format!**'}`;
          
          try {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: commentBody
            });
            console.log('‚úÖ Commit analysis comment posted successfully');
          } catch (error) {
            console.log('‚ö†Ô∏è Could not post comment (insufficient permissions):', error.message);
            console.log('üí° Consider adding a PAT_TOKEN secret for full functionality');
          }
