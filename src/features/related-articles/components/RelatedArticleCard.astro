---
/**
 * Related Articles Feature - Related Article Card Component
 * 
 * Tarjeta individual para mostrar un artículo relacionado
 * Soporta múltiples variantes y configuraciones
 */

import type { RelatedArticleCardProps } from '../types/related.types';
import { getReadingTime, formatReadingTime } from '../../reading-time';
import CardContent from '../../../components/ui/CardContent.astro';

interface Props extends RelatedArticleCardProps {}

const {
  article,
  variant = 'standard',
  showReadingTime = true,
  showPublishDate = true,
  showTags = true,
  showExcerpt = true,
  showThumbnail = true,
  showSimilarityScore = false,
  className = ''
} = Astro.props;

const { post, similarityScore, matchedTags, reasons } = article;
const { title, description, date, tags, image } = post.data;

// Calcular tiempo de lectura
const readingTime = getReadingTime(post.body || '');
const formattedReadingTime = formatReadingTime(readingTime);

// Formatear fecha
const formattedDate = new Intl.DateTimeFormat('es-ES', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
}).format(new Date(date));

// URL del post
const postUrl = `/blog/${post.slug}`;

// Imagen del post o placeholder
const cardImage = typeof image === 'string' ? image : image?.url || '/images/blog/seo-cover.webp';

// Extracto del post (primeros 150 caracteres de la descripción)
const excerpt = description && description.length > 150
  ? description.substring(0, 150) + '...'
  : description;

// Tags a mostrar (máximo 3)
const displayTags = tags ? tags.slice(0, 3) : [];

// Preparar metaInfo para el componente unificado
let metaInfo = '';
if (showPublishDate && showReadingTime) {
  metaInfo = `${formattedDate} • ${formattedReadingTime}`;
} else if (showPublishDate) {
  metaInfo = formattedDate;
} else if (showReadingTime) {
  metaInfo = formattedReadingTime;
}
---

<!-- Related Article Card - Estructura basada en PillarCard -->
<article class={className}>
  <a
    href={postUrl}
    class="card-base block overflow-hidden h-full flex flex-col"
    aria-label={`Leer artículo: ${title}`}
  >
    <!-- Thumbnail -->
    {showThumbnail && (
      <div class="aspect-video overflow-hidden relative">
        <img
          src={cardImage}
          alt={title}
          class="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
          loading="lazy"
          width="300"
          height="200"
        />

        {showSimilarityScore && import.meta.env.DEV && (
          <div class="absolute top-2 right-2 text-xs px-2 py-1 bg-black bg-opacity-50 text-white rounded">
            {Math.round(similarityScore * 100)}%
          </div>
        )}
      </div>
    )}

    <!-- Content -->
    <div class="flex-1 p-4 flex flex-col">
      {showExcerpt && excerpt && variant !== 'minimal' ? (
        <CardContent
          title={title}
          metaInfo={metaInfo}
          description={excerpt}
          tags={showTags ? displayTags : []}
          maxTags={3}
          clickableTags={false}
        />
      ) : (
        <CardContent
          title={title}
          metaInfo={metaInfo}
          description=""
          tags={showTags ? displayTags : []}
          maxTags={3}
          clickableTags={false}
        />
      )}

      <!-- Relation reasons (solo en desarrollo) -->
      {import.meta.env.DEV && reasons.length > 0 && (
        <div class="mb-4 text-xs">
          <details>
            <summary class="cursor-pointer text-gray-500">¿Por qué es relacionado?</summary>
            <ul class="mt-2 space-y-1 text-muted">
              {reasons.map(reason => (
                <li>
                  <strong>{reason.type}:</strong> {reason.details}
                  <span class="text-gray-500">({Math.round(reason.score * 100)}%)</span>
                </li>
              ))}
            </ul>
          </details>
        </div>
      )}
    </div>

    <!-- Footer con CTA -->
    <footer class="p-4 pt-0 mt-auto">
      <span class="inline-flex items-center font-medium text-sm text-blue-600 hover:text-blue-700 transition-colors">
        Leer artículo
        <svg class="w-4 h-4 ml-1" viewBox="0 0 16 16" fill="currentColor">
          <path d="M6 4l4 4-4 4" stroke="currentColor" stroke-width="2" fill="none"/>
        </svg>
      </span>
    </footer>
  </a>
</article>


