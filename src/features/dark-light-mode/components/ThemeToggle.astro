---
/**
 * ThemeToggle Component - Button to switch between light and dark theme
 * Integrated with modular theme system
 * 
 * @example
 * ```astro
 * ---
 * import { ThemeToggle } from '@features/theme-system/components';
 * ---
 * <ThemeToggle size="md" showLabel={false} />
 * ```
 */

import Icon from '../../../components/ui/Icon.astro';
import type { ThemeToggleProps } from '../engine/types';
import { TOGGLE_SIZE_CONFIG } from '../engine/types';

interface Props extends ThemeToggleProps {
  /** Button size */
  size?: 'sm' | 'md' | 'lg';
  /** Additional CSS classes */
  className?: string;
  /** Show text label */
  showLabel?: boolean;
  /** Custom aria label */
  ariaLabel?: string;
}

const {
  size = 'md',
  className = '',
  showLabel = false,
  ariaLabel = 'Toggle theme'
} = Astro.props;

// Get size configuration
const sizeConfig = TOGGLE_SIZE_CONFIG[size];
---

<button
  id="theme-toggle"
  type="button"
  class={`inline-flex items-center justify-center ${sizeConfig.padding} ${className}`}
  aria-label={ariaLabel}
  title={ariaLabel}
>
  <!-- Light theme icon (visible in dark mode) -->
  <span class="hidden">
    <Icon name="sun" size={sizeConfig.iconSize} />
  </span>

  <!-- Dark theme icon (visible in light mode) -->
  <span class="inline-flex">
    <Icon name="moon" size={sizeConfig.iconSize} />
  </span>

  {showLabel && (
    <span class="ml-2 text-sm font-medium">
      <span class="hidden">Light</span>
      <span >Dark</span>
    </span>
  )}
</button>

<script>
  import { themeManager } from '../engine/manager';

  // Function to initialize theme toggle
  function initThemeToggle() {
    const toggleButton = document.getElementById('theme-toggle');

    if (!toggleButton) {
      console.warn('Theme toggle button not found');
      return;
    }

    // Handle button click
    toggleButton.addEventListener('click', () => {
      themeManager.toggleTheme();
    });

    // Subscribe to theme changes to update visual state
    themeManager.subscribe((theme) => {
      // Update aria-label dynamically
      const newLabel = theme === 'dark' ? 'Switch to light theme' : 'Switch to dark theme';
      toggleButton.setAttribute('aria-label', newLabel);
      toggleButton.setAttribute('title', newLabel);
    });

    // Initialize theme
    themeManager.init();
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initThemeToggle);
  } else {
    initThemeToggle();
  }

  // Re-initialize on SPA navigation (if applicable)
  document.addEventListener('astro:page-load', initThemeToggle);
</script>


