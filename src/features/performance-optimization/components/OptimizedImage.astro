---
/**
 * Performance Optimization Feature - Optimized Image Component
 * 
 * Componente de imagen optimizada con:
 * - Lazy loading automático
 * - Formatos modernos (AVIF, WebP)
 * - Responsive images
 * - LQIP (Low Quality Image Placeholder)
 * - Preload para imágenes críticas
 */

interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  className?: string;
  lazy?: boolean;
  priority?: boolean;
  sizes?: string;
  quality?: 'low' | 'medium' | 'high';
  variant?: 'default' | 'thumbnail' | 'og' | 'wsp';
  showLQIP?: boolean;
  aspectRatio?: string;
}

const {
  src,
  alt,
  width,
  height,
  className = '',
  lazy = true,
  priority = false,
  sizes = '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw',
  quality = 'high',
  variant = 'default',
  showLQIP = true,
  aspectRatio
} = Astro.props;

// Usar la imagen original directamente (simplificado)
const sources = {
  fallback: src,
  webp: src,
  avif: src.replace(/\.(webp|jpg|jpeg|png)$/i, '.avif'),
  lqip: src // Por ahora usar la misma imagen
};

// Configuración de lazy loading
const loadingStrategy = priority ? 'eager' : (lazy ? 'lazy' : 'eager');
const fetchPriority = priority ? 'high' : 'auto';

// Generar clases CSS
const imageClasses = [
  'optimized-image',
  priority ? 'optimized-image--priority' : '',
  lazy ? 'optimized-image--lazy' : '',
  showLQIP ? 'optimized-image--lqip' : '',
  className
].filter(Boolean).join(' ');

// Configuración de responsive
const responsiveConfig = {
  mobile: { width: 375, quality: 80 },
  tablet: { width: 768, quality: 85 },
  desktop: { width: 1200, quality: 90 },
  large: { width: 1920, quality: 95 }
};

// Generar srcset simplificado
function generateSrcSet(imageSrc: string) {
  return `${imageSrc} 1x`;
}

// ID único para el componente
const imageId = `img-${Math.random().toString(36).substr(2, 9)}`;
---

<!-- Preload para imágenes críticas -->
{priority && (
  <>
    <link 
      rel="preload" 
      as="image" 
      href={sources.avif}
      type="image/avif"
    />
    <link 
      rel="preload" 
      as="image" 
      href={sources.webp}
      type="image/webp"
    />
  </>
)}

<!-- Container con aspect ratio -->
<div 
  class={`optimized-image-container ${aspectRatio ? 'has-aspect-ratio' : ''}`}
  style={aspectRatio ? `aspect-ratio: ${aspectRatio}` : undefined}
  data-image-id={imageId}
>
  <!-- LQIP Background -->
  {showLQIP && (
    <div 
      class="optimized-image-lqip"
      style={`background-image: url('${sources.lqip}')`}
    ></div>
  )}

  <!-- Imagen optimizada simplificada -->
  <img
    src={sources.fallback}
    alt={alt}
    width={width}
    height={height}
    loading={loadingStrategy}
    fetchpriority={fetchPriority}
    class={imageClasses}
    sizes={sizes}
    decoding={priority ? 'sync' : 'async'}
    data-src={sources.fallback}
    data-loaded="false"
  />

  <!-- Loading indicator -->
  {lazy && !priority && (
    <div class="optimized-image-loading">
      <div class="loading-spinner"></div>
    </div>
  )}
</div>



<script>
  // Intersection Observer para lazy loading
  if ('IntersectionObserver' in window) {
    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target as HTMLImageElement;
          
          // Cargar imagen
          if (img.dataset.src) {
            img.src = img.dataset.src;
            img.dataset.loaded = 'true';
            
            // Cleanup
            delete img.dataset.src;
            observer.unobserve(img);
          }
        }
      });
    }, {
      rootMargin: '50px 0px', // Cargar 50px antes de que sea visible
      threshold: 0.01
    });

    // Observar todas las imágenes lazy
    document.querySelectorAll('.optimized-image--lazy').forEach(img => {
      imageObserver.observe(img);
    });
  } else {
    // Fallback para navegadores sin IntersectionObserver
    document.querySelectorAll('.optimized-image--lazy').forEach(img => {
      const image = img as HTMLImageElement;
      if (image.dataset.src) {
        image.src = image.dataset.src;
        image.dataset.loaded = 'true';
        delete image.dataset.src;
      }
    });
  }

  // Manejar eventos de carga de imagen
  document.addEventListener('load', (e) => {
    const target = e.target as HTMLImageElement;
    if (target.classList.contains('optimized-image')) {
      target.dataset.loaded = 'true';
    }
  }, true);
</script>
