---
/**
 * Performance Optimization Feature - Optimized Image Component
 * 
 * Componente de imagen optimizada con:
 * - Lazy loading automático
 * - Formatos modernos (AVIF, WebP)
 * - Responsive images
 * - LQIP (Low Quality Image Placeholder)
 * - Preload para imágenes críticas
 */

interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  className?: string;
  lazy?: boolean;
  priority?: boolean;
  sizes?: string;
  quality?: 'low' | 'medium' | 'high';
  variant?: 'default' | 'thumbnail' | 'og' | 'wsp';
  showLQIP?: boolean;
  aspectRatio?: string;
}

const {
  src,
  alt,
  width,
  height,
  className = '',
  lazy = true,
  priority = false,
  sizes = '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw',
  quality = 'high',
  variant = 'default',
  showLQIP = true,
  aspectRatio
} = Astro.props;

// Generar rutas de imágenes optimizadas
function generateImageSources(originalSrc: string, variant: string) {
  // Detectar si es una imagen de blog con el nuevo sistema
  const isBlogImage = originalSrc.includes('/images/') && (originalSrc.includes('/portada') || originalSrc.includes('-cover'));

  if (isBlogImage) {
    // Para imágenes de blog, usar el sistema de variantes existente
    const basePath = originalSrc.replace(/\.(webp|jpg|jpeg|png)$/i, '');
    const suffix = variant !== 'default' ? `-${variant}` : '';

    return {
      avif: `${basePath}${suffix}-avif.avif`,
      webp: `${basePath}${suffix}.webp`,
      fallback: `${basePath}${suffix}.webp`,
      lqip: `${basePath}-lqip.webp`
    };
  } else {
    // Para otras imágenes, usar conversión simple
    return {
      avif: originalSrc.replace(/\.(webp|jpg|jpeg|png)$/i, '.avif'),
      webp: originalSrc.replace(/\.(jpg|jpeg|png)$/i, '.webp'),
      fallback: originalSrc,
      lqip: originalSrc.replace(/\.(webp|jpg|jpeg|png)$/i, '-lqip.webp')
    };
  }
}

const sources = generateImageSources(src, variant);

// Configuración de lazy loading
const loadingStrategy = priority ? 'eager' : (lazy ? 'lazy' : 'eager');
const fetchPriority = priority ? 'high' : 'auto';

// Generar clases CSS
const imageClasses = [
  'optimized-image',
  priority ? 'optimized-image--priority' : '',
  lazy ? 'optimized-image--lazy' : '',
  showLQIP ? 'optimized-image--lqip' : '',
  className
].filter(Boolean).join(' ');

// ID único para el componente
const imageId = `img-${Math.random().toString(36).substring(2, 9)}`;
---

<!-- Preload para imágenes críticas -->
{priority && (
  <>
    <link 
      rel="preload" 
      as="image" 
      href={sources.avif}
      type="image/avif"
    />
    <link 
      rel="preload" 
      as="image" 
      href={sources.webp}
      type="image/webp"
    />
  </>
)}

<!-- Container con aspect ratio -->
<div 
  class={`${aspectRatio ? 'has-aspect-ratio' : ''}`}
  style={aspectRatio ? `aspect-ratio: ${aspectRatio}` : undefined}
  data-image-id={imageId}
>
  <!-- LQIP Background -->
  {showLQIP && (
    <div
      class="absolute inset-0 bg-gray-200 dark:bg-gray-700 bg-cover bg-center transition-opacity duration-300"
      style={`background-image: url('${sources.lqip}'); filter: blur(5px); transform: scale(1.1);`}
      data-lqip="true"
    ></div>
  )}

  <!-- Picture element con formatos optimizados -->
  <picture>
    <!-- AVIF - formato más moderno -->
    <source
      srcset={sources.avif}
      type="image/avif"
      sizes={sizes}
    />

    <!-- WebP - amplio soporte -->
    <source
      srcset={sources.webp}
      type="image/webp"
      sizes={sizes}
    />

    <!-- Fallback - máxima compatibilidad -->
    <img
      src={sources.fallback}
      alt={alt}
      width={width}
      height={height}
      loading={loadingStrategy}
      fetchpriority={fetchPriority}
      class={imageClasses}
      decoding={priority ? 'sync' : 'async'}
      data-lazy={lazy && !priority ? 'true' : 'false'}
      data-loaded="false"
    />
  </picture>

  <!-- Loading indicator -->
  {lazy && !priority && (
    <div >
      <div ></div>
    </div>
  )}
</div>



<script>
  // Intersection Observer para lazy loading mejorado
  if ('IntersectionObserver' in window) {
    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target as HTMLImageElement;

          // Manejar carga de imagen
          if (img.dataset.lazy === 'true') {
            img.dataset.loaded = 'true';

            // Ocultar LQIP cuando la imagen se carga
            img.addEventListener('load', () => {
              const container = img.closest('[data-image-id]');
              const lqip = container?.querySelector('[data-lqip="true"]') as HTMLElement;
              if (lqip) {
                lqip.style.opacity = '0';
                setTimeout(() => lqip.remove(), 300);
              }
            }, { once: true });

            // Cleanup
            observer.unobserve(img);
          }
        }
      });
    }, {
      rootMargin: '50px 0px', // Cargar 50px antes de que sea visible
      threshold: 0.01
    });

    // Observar todas las imágenes lazy
    document.querySelectorAll('[data-lazy="true"]').forEach(img => {
      imageObserver.observe(img);
    });
  } else {
    // Fallback para navegadores sin IntersectionObserver
    document.querySelectorAll('[data-lazy="true"]').forEach(img => {
      const image = img as HTMLImageElement;
      if (image.dataset.src) {
        image.src = image.dataset.src;
        image.dataset.loaded = 'true';
        delete image.dataset.src;
      }
    });
  }

  // Manejar eventos de carga de imagen
  document.addEventListener('load', (e) => {
    const target = e.target as HTMLImageElement;
    if (target.dataset.imageId) {
      target.dataset.loaded = 'true';
    }
  }, true);
</script>
