---
/**
 * Content Pillars Feature - Pillar Card Component
 *
 * Tarjeta individual para mostrar un pilar de contenido usando el componente Card estándar
 */

import type { PillarCardProps } from '../types/pillars.types';
import { generatePillarUrl } from '../utils/pillar-manager';
import Card from '../../../components/ui/Card.astro';

interface Props extends PillarCardProps {}

const {
  pillar,
  postCount = 0,
  variant = 'default',
  showDescription = true,
  showPostCount = true,
  showIcon = true,
  className = ''
} = Astro.props;

const pillarUrl = generatePillarUrl(pillar.id);
---

<!-- Pillar Card usando componente Card estándar -->
<Card variant="default" className={className}>
  <a
    href={pillarUrl}
    class="block h-full p-0 no-underline text-inherit hover:text-inherit"
    aria-label={`Explorar artículos sobre ${pillar.title}`}
  >
    <div class="flex flex-col h-full p-6">
      <!-- Header -->
      <div class="flex items-start gap-4 mb-4">
        {showIcon && (
          <div
            class="flex-shrink-0 w-12 h-12 rounded-xl flex items-center justify-center text-2xl"
            style={`background-color: ${pillar.color.background}; color: ${pillar.color.primary};`}
          >
            {pillar.emoji}
          </div>
        )}

        <div class="flex-1 min-w-0">
          <h3 class="text-xl font-bold text-primary mb-1 leading-tight line-clamp-2">
            {pillar.title}
          </h3>

          {showPostCount && postCount > 0 && (
            <span
              class="text-sm font-medium"
              style={`color: ${pillar.color.primary};`}
            >
              {postCount} {postCount === 1 ? 'artículo' : 'artículos'}
            </span>
          )}
        </div>
      </div>

      <!-- Content -->
      {showDescription && variant !== 'compact' && (
        <div class="flex-1 mb-4">
          <p class="text-content leading-relaxed text-sm line-clamp-3">
            {pillar.description}
          </p>
        </div>
      )}

      <!-- Footer -->
      <div class="mt-auto">
        {variant === 'featured' && pillar.tags && pillar.tags.length > 0 && (
          <div class="flex flex-wrap gap-2 mb-4">
            {pillar.tags.slice(0, 3).map(tag => (
              <span
                class="px-2 py-1 rounded-md text-xs font-medium"
                style={`background-color: ${pillar.color.background}; color: ${pillar.color.primary};`}
              >
                #{tag}
              </span>
            ))}
            {pillar.tags.length > 3 && (
              <span class="px-2 py-1 rounded-md text-xs font-medium bg-surface-secondary text-muted">
                +{pillar.tags.length - 3}
              </span>
            )}
          </div>
        )}

        <div
          class="flex items-center justify-between font-medium text-sm"
          style={`color: ${pillar.color.primary};`}
        >
          <span>Explorar artículos</span>
          <svg
            class="w-4 h-4 transition-transform duration-300 group-hover:translate-x-1"
            viewBox="0 0 16 16"
            aria-hidden="true"
          >
            <path
              d="M6 4l4 4-4 4"
              stroke="currentColor"
              stroke-width="2"
              fill="none"
            />
          </svg>
        </div>
      </div>
    </div>
  </a>
</Card>

<style>
  /* Estilos mínimos para line-clamp si no está disponible en Tailwind */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
