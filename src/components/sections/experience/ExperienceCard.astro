---
import type { ExperienceItem } from './types';

interface Props {
  experience: ExperienceItem;
  className?: string;
}

const { experience, className = '' } = Astro.props;

// Helper function to format technologies list
const formatTechnologies = (technologies: string[]): string[] => {
  return technologies.map(tech => tech.trim());
};

// Helper function to format responsibilities list
const formatResponsibilities = (responsibilities: string[]): string[] => {
  return responsibilities.map(resp => resp.trim());
};

const formattedTechnologies = formatTechnologies(experience.technologies);
const formattedResponsibilities = formatResponsibilities(experience.responsibilities);
---

<div class={`card-base p-4 sm:p-6 ${className}`}>
  <!-- Company and Position Header -->
  <header class="mb-4">
    <h3 class="text-xl sm:text-2xl font-bold mb-2 text-primary">
      {experience.website ? (
        <a
          href={experience.website}
          target="_blank"
          rel="noopener noreferrer"
          class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors"
          aria-label={`Visit ${experience.company} website`}
        >
          {experience.company}
          <span class="ml-1 text-sm">‚Üó</span>
        </a>
      ) : (
        experience.company
      )}
    </h3>

    <h4 class="text-lg sm:text-xl mb-2 text-secondary">
      {experience.position}
      {experience.current && (
        <span class="ml-2 inline-flex items-center px-2 py-1 text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200 rounded-full">
          Current
        </span>
      )}
    </h4>

    <p class="mb-4 text-muted">
      {experience.period}
      {experience.location && (
        <span class="ml-2">| {experience.location}</span>
      )}
    </p>
  </header>

  <!-- Description (if available) -->
  {experience.description && (
    <div class="mb-4">
      <p class="text-secondary leading-relaxed">
        {experience.description}
      </p>
    </div>
  )}

  <!-- Technologies Section -->
  {formattedTechnologies.length > 0 && (
    <div class="mb-4">
      <h5 class="font-bold mb-2 flex items-center text-primary">
        <span class="mr-2">üõ†Ô∏è</span>
        Technologies and Tools:
      </h5>
      <ul class="list-disc pl-5 space-y-1 text-secondary">
        {formattedTechnologies.map(tech => (
          <li class="leading-relaxed">{tech}</li>
        ))}
      </ul>
    </div>
  )}

  <!-- Responsibilities Section -->
  {formattedResponsibilities.length > 0 && (
    <div>
      <h5 class="font-bold mb-2 flex items-center text-primary">
        <span class="mr-2">üéØ</span>
        Responsibilities and Achievements:
      </h5>

      {formattedResponsibilities.length > 4 ? (
        <!-- Collapsible version for long lists -->
        <div class="collapsible-content">
          <ul class="list-disc pl-5 space-y-1 text-secondary collapsible-list" data-max-items="4">
            {formattedResponsibilities.map((responsibility, index) => (
              <li class={`leading-relaxed ${index >= 4 ? 'collapsible-item hidden' : ''}`}>
                {responsibility}
              </li>
            ))}
          </ul>

          <!-- Gradient overlay and expand button -->
          <div class="relative mt-2">
            <div class="collapsible-gradient absolute -top-6 left-0 right-0 h-6 bg-gradient-to-t from-white dark:from-gray-800 to-transparent pointer-events-none"></div>
            <button
              class="collapsible-toggle text-sm text-secondary hover:text-primary transition-colors flex items-center gap-1 font-medium focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50 rounded px-1 py-0.5 underline hover:no-underline"
              aria-expanded="false"
            >
              <span class="toggle-text">Show more ({formattedResponsibilities.length - 4} more)</span>
              <svg class="toggle-icon w-4 h-4 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </button>
          </div>
        </div>
      ) : (
        <!-- Simple version for short lists -->
        <ul class="list-disc pl-5 space-y-1 text-secondary">
          {formattedResponsibilities.map(responsibility => (
            <li class="leading-relaxed">{responsibility}</li>
          ))}
        </ul>
      )}
    </div>
  )}
</div>

<script>
  // Collapsible functionality for experience cards
  document.addEventListener('DOMContentLoaded', function() {
    const toggleButtons = document.querySelectorAll('.collapsible-toggle');

    toggleButtons.forEach(button => {
      button.addEventListener('click', function() {
        const content = this.closest('.collapsible-content');
        const items = content.querySelectorAll('.collapsible-item');
        const gradient = content.querySelector('.collapsible-gradient');
        const toggleText = this.querySelector('.toggle-text');
        const toggleIcon = this.querySelector('.toggle-icon');
        const isExpanded = this.getAttribute('aria-expanded') === 'true';

        if (isExpanded) {
          // Collapse
          items.forEach(item => item.classList.add('hidden'));
          gradient.classList.remove('hidden');
          const hiddenCount = items.length;
          toggleText.textContent = `Show more (${hiddenCount} more)`;
          toggleIcon.style.transform = 'rotate(0deg)';
          this.setAttribute('aria-expanded', 'false');
        } else {
          // Expand
          items.forEach(item => item.classList.remove('hidden'));
          gradient.classList.add('hidden');
          toggleText.textContent = 'Show less';
          toggleIcon.style.transform = 'rotate(180deg)';
          this.setAttribute('aria-expanded', 'true');
        }
      });
    });
  });
</script>
