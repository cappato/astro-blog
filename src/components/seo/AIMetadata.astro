---
/**
 * AI Metadata Component
 * Centralized AI metadata generation with configuration-driven approach
 * Generates both meta tags and structured data for AI assistants
 */

import { SITE_INFO, AI_METADATA_CONFIG } from '../../config/site.ts';

interface Props {
  title: string;
  description: string;
  type: 'website' | 'article' | 'profile' | 'blog';
  url: string;
  datePublished?: Date;
  dateModified?: Date;
  tags?: string[];
  author?: string;
}

const {
  title,
  description,
  type,
  url,
  datePublished,
  dateModified,
  tags = [],
  author = AI_METADATA_CONFIG.author.name
} = Astro.props;

const config = AI_METADATA_CONFIG;
const siteUrl = SITE_INFO.url;
const fullUrl = url.startsWith('http') ? url : `${siteUrl}${url}`;

// AI Metadata Manager Class
class AIMetadataManager {
  private config = config;

  public generateStructuredData(props: {
    title: string;
    description: string;
    type: string;
    fullUrl: string;
    datePublished?: Date;
    dateModified?: Date;
    tags: string[];
    author?: string;
  }) {
    const baseMetadata = {
      "@context": this.config.schemaContext,
      "@type": this.getContentType(props.type),
      "name": props.title,
      "description": props.description,
      "url": props.fullUrl,
      "keywords": (props.tags || []).join(", "),
      "author": {
        "@type": this.config.author.type,
        "name": props.author || this.config.author.name,
        "url": this.config.author.url
      },
      "inLanguage": this.config.language,
      "isAccessibleForFree": this.config.isAccessibleForFree,
      "potentialAction": {
        "@type": this.config.actionTypes.read,
        "target": props.fullUrl
      }
    };

    // Add article-specific fields
    if (props.type === 'article' && props.datePublished) {
      return {
        ...baseMetadata,
        "datePublished": props.datePublished.toISOString(),
        "dateModified": props.dateModified ? props.dateModified.toISOString() : props.datePublished.toISOString(),
        "mainEntityOfPage": {
          "@type": "WebPage",
          "@id": props.fullUrl
        }
      };
    }

    return baseMetadata;
  }

  public getContentType(type: string): string {
    return this.config.contentTypes[type as keyof typeof this.config.contentTypes] || this.config.contentTypes.website;
  }

  public generateMetaTagName(suffix: string): string {
    return `${this.config.metaTagPrefix}${suffix}`;
  }
}

const aiManager = new AIMetadataManager();
const structuredData = aiManager.generateStructuredData({
  title,
  description,
  type,
  fullUrl,
  datePublished,
  dateModified,
  tags,
  author
});
---

<!-- AI-specific meta tags -->
<meta name={aiManager.generateMetaTagName('description')} content={description} />
<meta name={aiManager.generateMetaTagName('keywords')} content={tags.join(", ")} />
<meta name={aiManager.generateMetaTagName('type')} content={type} />
{datePublished && <meta name={aiManager.generateMetaTagName('published')} content={datePublished.toISOString()} />}
{dateModified && <meta name={aiManager.generateMetaTagName('modified')} content={dateModified.toISOString()} />}
<meta name={aiManager.generateMetaTagName('author')} content={author || config.author.name} />

<!-- Link to AI metadata file -->
<link rel="ai-metadata" href={config.metadataFilePath} />

<!-- Structured data for AI (JSON-LD) -->
<script type="application/ld+json" is:inline set:html={JSON.stringify(structuredData)} />

