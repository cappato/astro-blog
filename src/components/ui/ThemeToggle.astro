---
/**
 * Componente de toggle para cambiar entre tema claro y oscuro
 * Incluye persistencia en localStorage y detección de preferencia del sistema
 */

interface Props {
  size?: 'sm' | 'md' | 'lg';
  className?: string;
}

const { size = 'md', className = '' } = Astro.props;

// Clases según tamaño
const sizeClasses = {
  sm: 'w-8 h-8 text-sm',
  md: 'w-10 h-10 text-base',
  lg: 'w-12 h-12 text-lg'
};

const buttonClasses = `
  ${sizeClasses[size]}
  relative
  rounded-full
  bg-gray-100
  hover:bg-gray-200
  dark:bg-gray-700
  dark:hover:bg-gray-600
  border-2
  border-gray-300
  dark:border-gray-600
  transition-all
  duration-300
  ease-in-out
  focus:outline-none
  focus:ring-2
  focus:ring-primary
  focus:ring-offset-2
  focus:ring-offset-white
  dark:focus:ring-offset-gray-900
  flex
  items-center
  justify-center
  group
  shadow-sm
  hover:shadow-md
  ${className}
`.trim();
---

<button
  id="theme-toggle"
  class={buttonClasses}
  aria-label="Cambiar tema"
  title="Cambiar entre tema claro y oscuro"
  type="button"
>
  <!-- Icono de sol (tema claro) -->
  <svg
    id="sun-icon"
    class="w-5 h-5 text-yellow-500 transition-all duration-300 ease-in-out transform group-hover:scale-110 group-hover:rotate-12"
    fill="currentColor"
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path d="M12 2.25a.75.75 0 01.75.75v2.25a.75.75 0 01-1.5 0V3a.75.75 0 01.75-.75zM7.5 12a4.5 4.5 0 119 0 4.5 4.5 0 01-9 0zM18.894 6.166a.75.75 0 00-1.06-1.06l-1.591 1.59a.75.75 0 101.06 1.061l1.591-1.59zM21.75 12a.75.75 0 01-.75.75h-2.25a.75.75 0 010-1.5H21a.75.75 0 01.75.75zM17.834 18.894a.75.75 0 001.06-1.06l-1.59-1.591a.75.75 0 10-1.061 1.06l1.59 1.591zM12 18a.75.75 0 01.75.75V21a.75.75 0 01-1.5 0v-2.25A.75.75 0 0112 18zM7.758 17.303a.75.75 0 00-1.061-1.06l-1.591 1.59a.75.75 0 001.06 1.061l1.591-1.59zM6 12a.75.75 0 01-.75.75H3a.75.75 0 010-1.5h2.25A.75.75 0 016 12zM6.697 7.757a.75.75 0 001.06-1.06l-1.59-1.591a.75.75 0 00-1.061 1.06l1.59 1.591z" />
  </svg>

  <!-- Icono de luna (tema oscuro) -->
  <svg
    id="moon-icon"
    class="w-5 h-5 text-blue-400 transition-all duration-300 ease-in-out transform group-hover:scale-110 group-hover:-rotate-12 absolute opacity-0"
    fill="currentColor"
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path fill-rule="evenodd" d="M9.528 1.718a.75.75 0 01.162.819A8.97 8.97 0 009 6a9 9 0 009 9 8.97 8.97 0 003.463-.69.75.75 0 01.981.98 10.503 10.503 0 01-9.694 6.46c-5.799 0-10.5-4.701-10.5-10.5 0-4.368 2.667-8.112 6.46-9.694a.75.75 0 01.818.162z" clip-rule="evenodd" />
  </svg>
</button>

<script>
  // Tipos para TypeScript
  type Theme = 'light' | 'dark';

  class ThemeManager {
    private currentTheme: Theme;
    private readonly STORAGE_KEY = 'theme-preference';
    private readonly sunIcon: HTMLElement | null;
    private readonly moonIcon: HTMLElement | null;
    private readonly toggleButton: HTMLElement | null;

    constructor() {
      this.sunIcon = document.getElementById('sun-icon');
      this.moonIcon = document.getElementById('moon-icon');
      this.toggleButton = document.getElementById('theme-toggle');

      // Inicializar tema
      this.currentTheme = this.getInitialTheme();
      this.applyTheme(this.currentTheme);
      this.updateIcons();

      // Configurar event listeners
      this.setupEventListeners();
    }

    /**
     * Obtener tema inicial basado en localStorage o preferencia del sistema
     */
    private getInitialTheme(): Theme {
      // Verificar localStorage primero
      const savedTheme = localStorage.getItem(this.STORAGE_KEY) as Theme | null;
      if (savedTheme && (savedTheme === 'light' || savedTheme === 'dark')) {
        return savedTheme;
      }

      // Fallback a preferencia del sistema
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        return 'dark';
      }

      return 'light'; // Default
    }

    /**
     * Aplicar tema al documento
     */
    private applyTheme(theme: Theme): void {
      const html = document.documentElement;

      if (theme === 'dark') {
        html.classList.add('dark');
      } else {
        html.classList.remove('dark');
      }

      // Guardar en localStorage
      localStorage.setItem(this.STORAGE_KEY, theme);
      this.currentTheme = theme;
    }

    /**
     * Actualizar iconos según el tema actual
     */
    private updateIcons(): void {
      if (!this.sunIcon || !this.moonIcon) return;

      if (this.currentTheme === 'dark') {
        // Mostrar luna (tema oscuro activo)
        this.sunIcon.style.opacity = '0';
        this.sunIcon.style.transform = 'scale(0.8) rotate(90deg)';
        this.moonIcon.style.opacity = '1';
        this.moonIcon.style.transform = 'scale(1) rotate(0deg)';
      } else {
        // Mostrar sol (tema claro activo)
        this.sunIcon.style.opacity = '1';
        this.sunIcon.style.transform = 'scale(1) rotate(0deg)';
        this.moonIcon.style.opacity = '0';
        this.moonIcon.style.transform = 'scale(0.8) rotate(-90deg)';
      }
    }

    /**
     * Alternar entre temas
     */
    private toggleTheme(): void {
      const newTheme: Theme = this.currentTheme === 'light' ? 'dark' : 'light';
      this.applyTheme(newTheme);
      this.updateIcons();

      // Dispatch custom event para otros componentes
      window.dispatchEvent(new CustomEvent('theme-changed', {
        detail: { theme: newTheme }
      }));
    }

    /**
     * Configurar event listeners
     */
    private setupEventListeners(): void {
      // Click en el botón
      this.toggleButton?.addEventListener('click', () => {
        this.toggleTheme();
      });

      // Keyboard navigation
      this.toggleButton?.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          this.toggleTheme();
        }
      });

      // Escuchar cambios en preferencia del sistema
      if (window.matchMedia) {
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
          // Solo aplicar si no hay preferencia guardada
          if (!localStorage.getItem(this.STORAGE_KEY)) {
            const systemTheme: Theme = e.matches ? 'dark' : 'light';
            this.applyTheme(systemTheme);
            this.updateIcons();
          }
        });
      }
    }

    /**
     * Obtener tema actual
     */
    public getCurrentTheme(): Theme {
      return this.currentTheme;
    }

    /**
     * Establecer tema programáticamente
     */
    public setTheme(theme: Theme): void {
      this.applyTheme(theme);
      this.updateIcons();
    }
  }

  // Inicializar cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    new ThemeManager();
  });

  // También inicializar inmediatamente por si el script se carga después
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new ThemeManager();
    });
  } else {
    new ThemeManager();
  }
</script>

<style>
  /* Asegurar transiciones suaves para los iconos */
  #sun-icon,
  #moon-icon {
    transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
  }

  /* Mejorar accesibilidad con focus visible */
  #theme-toggle:focus-visible {
    outline: 2px solid theme('colors.primary.DEFAULT');
    outline-offset: 2px;
  }

  /* Animación de hover más suave */
  #theme-toggle:hover #sun-icon,
  #theme-toggle:hover #moon-icon {
    filter: brightness(1.1);
  }
</style>
