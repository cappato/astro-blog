---
interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  lazy?: boolean;
  decoding?: 'async' | 'sync' | 'auto';
  fetchpriority?: 'high' | 'low' | 'auto';
  sizes?: string;
  debug?: boolean;
}

const {
  src,
  alt,
  width,
  height,
  class: className = '',
  lazy = true,
  decoding = 'async',
  fetchpriority = 'auto',
  sizes = '(max-width: 768px) 100vw, 50vw',
  debug = false
} = Astro.props;

// Determinar si es una imagen de post
const isPostImage = src.includes('/images/') && src.includes('/portada');

// Extraer postId y tipo si es una imagen de post
let postId, imageType;
if (isPostImage) {
  const parts = src.split('/');
  postId = parts[parts.length - 2];
  const filename = parts[parts.length - 1].split('.')[0];
  imageType = filename === 'portada' ? 'default' : filename.replace('portada-', '');
}

let avifSrc, webpSrc, fallbackSrc, lqipSrc;
if (isPostImage) {
  const basePath = `/images/${postId}/portada`;
  const suffix = imageType === 'default' ? '' : `-${imageType}`;

  avifSrc = `${basePath}${suffix}.avif`;
  webpSrc = `${basePath}${suffix}.webp`;
  fallbackSrc = src;
  lqipSrc = `${basePath}-lqip.webp`;
}

const hasSize = width && height;
const aspectRatio = hasSize ? width / height : undefined;
const loading = lazy ? 'lazy' : 'eager';
---

{isPostImage ? (
  <figure class={`image-container ${className}`}>
    <div class="lqip-container" style={`background-image: url(${lqipSrc}); padding-bottom: ${hasSize ? `${(height / width) * 100}%` : '56.25%'};`}>
      <picture>
        <source srcset={avifSrc} type="image/avif" />
        <source srcset={webpSrc} type="image/webp" />
        <img
          src={fallbackSrc}
          alt={alt}
          width={width}
          height={height}
          loading={loading}
          decoding={decoding}
          fetchpriority={fetchpriority}
          sizes={sizes}
          style={aspectRatio ? `aspect-ratio: ${aspectRatio}` : ''}
          onload="this.parentNode.parentNode.classList.add('loaded')"
        />
      </picture>
    </div>
  </figure>
) : (
  <img
    src={src}
    alt={alt}
    width={width}
    height={height}
    class={className}
    loading={loading}
    decoding={decoding}
    fetchpriority={fetchpriority}
    sizes={sizes}
    style={aspectRatio ? `aspect-ratio: ${aspectRatio}` : ''}
  />
)}

<style>
  .image-container {
    overflow: hidden;
    margin: 0;
    position: relative;
  }

  .lqip-container {
    background-size: cover;
    background-position: center;
    position: relative;
    overflow: hidden;
  }

  .lqip-container img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .lqip-container.loaded img {
    opacity: 1;
  }
</style>

