---
/**
 * P√°gina din√°mica para pilares individuales
 * Muestra todos los posts relacionados con un pilar espec√≠fico
 */

import { getCollection } from 'astro:content';
import type { GetStaticPaths } from 'astro';
import MainLayout from '../../../layouts/MainLayout.astro';
import BlogPostCard from '../../../components/blog/BlogPostCard.astro';
import BaseTag from '../../../components/ui/BaseTag.astro';
import {
  getAllPillars,
  getPillarById,
  TAG_TO_PILLAR_MAPPING
} from '../../../features/content-pillars/config/pillars.config';
import {
  getTagUrl,
  transformPostsToCardData
} from '../../../utils/blogPost';
import ContentContainer from '../../../components/layout/ContentContainer.astro';
import ContentWidth from '../../../components/layout/ContentWidth.astro';

// Generar rutas est√°ticas para todos los pilares
export const getStaticPaths: GetStaticPaths = async () => {
  const allPillars = getAllPillars();

  return allPillars.map((pillar) => ({
    params: { pillarId: pillar.id },
    props: { pillar }
  }));
};

// Props del componente (no usado directamente, pero necesario para getStaticPaths)

const { pillarId } = Astro.params;

// Obtener el pilar por ID
const pillar = getPillarById(pillarId as string);

// Validar que el pilar existe
if (!pillar) {
  return Astro.redirect('/404');
}

// Obtener todos los posts del blog
const allPosts = await getCollection('blog');

// Filtrar posts que pertenecen a este pilar
const pillarPosts = allPosts.filter(post => {
  const postTags = post.data.tags || [];
  
  // Verificar si alg√∫n tag del post pertenece a este pilar
  return postTags.some(tag => {
    const tagPillarId = TAG_TO_PILLAR_MAPPING[tag];
    return tagPillarId === pillar.id;
  });
});

// Ordenar posts por fecha (m√°s recientes primero)
const sortedPosts = pillarPosts.sort((a, b) => 
  new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);

// Usar la funci√≥n oficial para transformar posts a card data
const postCards = transformPostsToCardData(sortedPosts);

// Obtener todos los tags √∫nicos de este pilar
const pillarTags = Object.keys(TAG_TO_PILLAR_MAPPING)
  .filter(tag => TAG_TO_PILLAR_MAPPING[tag] === pillar.id);

// Calcular estad√≠sticas
const totalPosts = sortedPosts.length;
const totalReadingTime = sortedPosts.reduce((total, post) => {
  const content = post.body || '';
  const wordCount = content.split(/\s+/).length;
  const readingTime = Math.ceil(wordCount / 200); // 200 palabras por minuto
  return total + readingTime;
}, 0);

// SEO metadata
const seoData = {
  title: `${pillar.title} - Pilar de Contenido`,
  description: pillar.description,
  keywords: [...pillar.keywords, ...pillar.tags],
  type: 'website' as const
};

// DEBUG: Verificar que la p√°gina se ejecuta
if (import.meta.env.DEV) {
  console.log('üìÑ PILLAR PAGE DEBUG:', { pathname: Astro.url.pathname, pillarId, pillarTitle: pillar.title });
}

// Breadcrumb personalizado - Nombre espec√≠fico del pilar
const customTitle = pillar.title;
---

<MainLayout 
  title={seoData.title}
  description={seoData.description}
  keywords={seoData.keywords}
  type={seoData.type}
  customTitle={customTitle}
>
  <div slot="header">
    <!-- Header content if needed -->
  </div>

  <!-- Main Content -->
  <ContentContainer className="py-8">
    <ContentWidth width="standard">
    
    <!-- Pillar Header -->
    <header class="mb-12">
      <div class="flex items-center gap-4 mb-6">
        <div>
          <h1 class="text-4xl font-bold mb-2">
            {pillar.title}
          </h1>
          <div class="flex items-center gap-4 text-sm text-gray-600">
            <span>{totalPosts} {totalPosts === 1 ? 'art√≠culo' : 'art√≠culos'}</span>
            <span>{totalReadingTime} min de contenido</span>
          </div>
        </div>
      </div>
      
      <p class="text-lg leading-relaxed mb-8">
        {pillar.description}
      </p>

      <!-- Tags del Pilar -->
      <div class="mb-8">
        <h3 class="text-sm font-semibold tracking-wide mb-4">
          Tags relacionados
        </h3>
        <div class="flex flex-wrap gap-2">
          {pillarTags.map(tag => (
            <BaseTag
              tag={tag}
              href={getTagUrl(tag)}
              variant="default"
            />
          ))}
        </div>
      </div>
    </header>

    <!-- Posts Section -->
    {totalPosts > 0 ? (
      <section>
        <h2 class="text-2xl font-bold mb-8">
          üìö Art√≠culos de {pillar.title}
        </h2>

        <!-- Grid Unificado - 2 columnas desktop, 1 m√≥vil -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          {postCards.map((postData, index) => (
            <BlogPostCard
              post={postData}
              loading={index === 0 ? 'eager' : 'lazy'}
            />
          ))}
        </div>
      </section>
    ) : (
      <!-- Empty State -->
      <section class="text-center py-16">
        <h2 class="text-2xl font-bold mb-4">
          Pr√≥ximamente contenido sobre {pillar.title}
        </h2>
        <p class="mb-8">
          Este pilar est√° en desarrollo. Pronto habr√° art√≠culos incre√≠bles sobre estos temas.
        </p>
        <a
          href="/blog"
          class="inline-flex items-center gap-2 px-6 py-3 bg-gray-600 text-white rounded-md hover:bg-gray-700 transition-colors"
        >
          Ver todos los art√≠culos
        </a>
      </section>
    )}

    <!-- Related Pillars -->
    <aside class="mt-16 pt-8 border-t border-gray-200">
      <h3 class="text-xl font-bold mb-6">
        Otros pilares de contenido
      </h3>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        {getAllPillars()
          .filter(p => p.id !== pillar.id)
          .slice(0, 4)
          .map(relatedPillar => (
            <a
              href={`/blog/pillar/${relatedPillar.id}`}
              class="block border border-gray-200 rounded-lg overflow-hidden hover:border-gray-300 hover:shadow-sm transition-all duration-200 no-underline"
            >
              <!-- Imagen del pilar -->
              <div class="aspect-video overflow-hidden">
                <img
                  src={relatedPillar.image.src}
                  alt={relatedPillar.image.alt}
                  class="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
                  loading="lazy"
                  width="300"
                  height="200"
                />
              </div>

              <!-- Contenido -->
              <div class="p-4 flex flex-col h-full">
                <div class="font-semibold text-gray-900 mb-2">
                  {relatedPillar.title}
                </div>
                <div class="text-sm text-gray-600 mb-3 flex-1">
                  {relatedPillar.description}
                </div>
                <div class="text-xs text-gray-500 font-medium">
                  Explorar contenido ‚Üí
                </div>
              </div>
            </a>
          ))
        }
      </div>
    </aside>
    </ContentWidth>
  </ContentContainer>

  <div slot="footer">
    <!-- Footer content if needed -->
  </div>
</MainLayout>


