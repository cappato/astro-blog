#!/usr/bin/env node

/**
 * Demo Workflow Script
 * Created by Carlos (Carlitos) - Astro Blog Agent
 * 
 * Demonstrates the complete automated git workflow:
 * 1. Create feature branch
 * 2. Make sample changes
 * 3. Commit with conventional format
 * 4. Push to remote
 * 5. Create Pull Request
 * 6. Show automation in action
 */

import { execSync } from 'child_process';
import { writeFileSync, readFileSync, existsSync } from 'fs';
import { join } from 'path';
import readline from 'readline';

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (query) => new Promise(resolve => rl.question(query, resolve));

const execCommand = (command, options = {}) => {
  try {
    const result = execSync(command, { 
      encoding: 'utf8', 
      stdio: options.silent ? 'pipe' : 'inherit',
      ...options 
    });
    return result?.toString().trim();
  } catch (error) {
    if (!options.ignoreError) {
      console.error(`❌ Error executing: ${command}`);
      console.error(error.message);
      if (!options.continueOnError) {
        process.exit(1);
      }
    }
    return null;
  }
};

const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

const showProgress = async (message, duration = 2000) => {
  process.stdout.write(`${message}...`);
  for (let i = 0; i < 3; i++) {
    await sleep(duration / 3);
    process.stdout.write('.');
  }
  console.log(' ✅');
};

const createDemoChanges = () => {
  console.log('\n📝 Creating demo changes...\n');
  
  // Create a demo file
  const demoContent = `# Demo Feature by Carlos (Carlitos)

This is a demonstration of the automated git workflow system.

## Features Demonstrated:
- ✅ Automatic branch creation
- ✅ Conventional commit messages
- ✅ Automated PR creation
- ✅ Label assignment
- ✅ Status checks

## Timestamp:
Created at: ${new Date().toISOString()}

## Workflow Steps:
1. Branch created automatically
2. Changes committed with conventional format
3. Pushed to remote repository
4. Pull Request created with template
5. Labels assigned automatically
6. CI/CD pipeline triggered

---

*Generated by Carlos (Carlitos) - Demo Workflow* 🤖
`;

  writeFileSync('DEMO_FEATURE.md', demoContent);
  console.log('✅ Created DEMO_FEATURE.md');
  
  // Update README with demo info
  if (existsSync('README.md')) {
    const readme = readFileSync('README.md', 'utf8');
    const updatedReadme = readme.replace(
      '**CI/CD Status:** Testing improved workflow reliability - 2024-12-19 🚀',
      `**CI/CD Status:** Demo workflow active - ${new Date().toISOString().split('T')[0]} 🤖\n**Demo by:** Carlos (Carlitos) - Automated Git Workflow`
    );
    writeFileSync('README.md', updatedReadme);
    console.log('✅ Updated README.md with demo info');
  }
  
  // Create a small change in package.json (add demo script)
  if (existsSync('package.json')) {
    const packageJson = JSON.parse(readFileSync('package.json', 'utf8'));
    packageJson.scripts['demo:workflow'] = 'node scripts/demo-workflow.js';
    packageJson.scripts['demo:cleanup'] = 'git checkout main && git branch -D demo/* || true';
    writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
    console.log('✅ Added demo scripts to package.json');
  }
};

const demonstrateWorkflow = async () => {
  console.log('🎬 Starting Automated Git Workflow Demo\n');
  console.log('🤖 Carlos (Carlitos) will demonstrate the complete workflow\n');
  
  // Step 1: Create branch
  console.log('📋 Step 1: Creating feature branch...');
  await showProgress('🌿 Creating demo branch');
  
  const branchName = `demo/carlos-workflow-demo-${Date.now()}`;
  execCommand(`git checkout -b ${branchName}`);
  console.log(`✅ Created branch: ${branchName}\n`);
  
  // Step 2: Make changes
  console.log('📋 Step 2: Making demo changes...');
  createDemoChanges();
  console.log('✅ Demo changes created\n');
  
  // Step 3: Show git status
  console.log('📋 Step 3: Checking git status...');
  execCommand('git status');
  console.log('');
  
  // Step 4: Commit changes
  console.log('📋 Step 4: Committing with conventional format...');
  await showProgress('📝 Staging changes');
  execCommand('git add .');
  
  const commitMessage = 'feat: add automated git workflow demo by Carlos';
  execCommand(`git commit -m "${commitMessage}"`);
  console.log(`✅ Committed with message: "${commitMessage}"\n`);
  
  // Step 5: Push to remote
  console.log('📋 Step 5: Pushing to remote...');
  await showProgress('🚀 Pushing to origin');
  execCommand(`git push -u origin ${branchName}`);
  console.log('✅ Pushed to remote successfully\n');
  
  // Step 6: Create PR (if GitHub CLI available)
  console.log('📋 Step 6: Creating Pull Request...');
  const hasGH = execCommand('which gh', { silent: true, ignoreError: true });
  
  if (hasGH) {
    await showProgress('🔄 Creating PR with GitHub CLI');
    
    const prTitle = 'feat: Carlos (Carlitos) automated workflow demonstration';
    const prBody = `## 🤖 Automated Workflow Demo

This PR demonstrates the complete automated git workflow created by Carlos (Carlitos).

### 🎯 What's Demonstrated:
- [x] Automatic branch creation with naming conventions
- [x] Conventional commit message format
- [x] Automated push to remote
- [x] Pull Request creation with templates
- [x] Automatic label assignment
- [x] CI/CD pipeline integration

### 🔧 Changes Made:
- Added \`DEMO_FEATURE.md\` with workflow documentation
- Updated \`README.md\` with demo status
- Added demo scripts to \`package.json\`

### 🧪 Testing:
- [x] All changes are non-breaking
- [x] Demo files are safe to merge
- [x] Workflow automation working correctly

### 📋 Next Steps:
1. Review the automated workflow
2. Test the CI/CD pipeline
3. Merge when ready
4. Clean up demo branch

---

**Created by:** Carlos (Carlitos) - Astro Blog Agent 🤖
**Branch:** \`${branchName}\`
**Workflow:** Fully Automated`;

    try {
      const prCommand = `gh pr create --title "${prTitle}" --body "${prBody}" --label "type:feature,carlos:automated,carlos:workflow,size:small" --draft`;
      const prUrl = execCommand(prCommand, { silent: true });
      
      if (prUrl) {
        console.log(`✅ Pull Request created: ${prUrl}`);
        console.log('🏷️  Labels assigned automatically');
      }
    } catch (error) {
      console.log('⚠️  PR creation failed, but branch is ready for manual PR');
      console.log(`📋 Manual PR URL: https://github.com/cappato/astro-blog/compare/main...${branchName}`);
    }
  } else {
    console.log('⚠️  GitHub CLI not available');
    console.log(`📋 Manual PR URL: https://github.com/cappato/astro-blog/compare/main...${branchName}`);
  }
  
  console.log('\n🎉 Demo Workflow Completed!\n');
  
  // Summary
  console.log('📊 Workflow Summary:');
  console.log(`   ✅ Branch: ${branchName}`);
  console.log(`   ✅ Commit: ${commitMessage}`);
  console.log('   ✅ Changes: Demo files created');
  console.log('   ✅ Push: Successful');
  console.log('   ✅ PR: Created (or ready for manual creation)');
  console.log('\n🔍 What happens next:');
  console.log('   1. CI/CD pipeline will run automatically');
  console.log('   2. Tests will be executed');
  console.log('   3. Quality checks will be performed');
  console.log('   4. PR will be ready for review');
  console.log('   5. Auto-merge can be enabled if all checks pass');
  
  return branchName;
};

const showWorkflowStatus = () => {
  console.log('\n📋 Current Workflow Status:');
  console.log(`   Current branch: ${execCommand('git branch --show-current', { silent: true })}`);
  console.log(`   Remote status: ${execCommand('git status --porcelain', { silent: true }) ? 'Has changes' : 'Clean'}`);
  console.log(`   Last commit: ${execCommand('git log --oneline -1', { silent: true })}`);
};

const cleanupDemo = async () => {
  console.log('\n🧹 Cleaning up demo...\n');
  
  const cleanup = await question('Clean up demo files and branch? (y/n): ');
  if (cleanup.toLowerCase() === 'y') {
    // Switch back to main
    execCommand('git checkout main', { ignoreError: true });
    
    // Remove demo files
    execCommand('rm -f DEMO_FEATURE.md', { ignoreError: true });
    
    // Reset README
    if (existsSync('README.md')) {
      const readme = readFileSync('README.md', 'utf8');
      const resetReadme = readme.replace(
        /\*\*CI\/CD Status:\*\* Demo workflow active.*\n\*\*Demo by:\*\* Carlos.*$/m,
        '**CI/CD Status:** Testing improved workflow reliability - 2024-12-19 🚀'
      );
      writeFileSync('README.md', resetReadme);
    }
    
    // Reset package.json
    if (existsSync('package.json')) {
      const packageJson = JSON.parse(readFileSync('package.json', 'utf8'));
      delete packageJson.scripts['demo:workflow'];
      delete packageJson.scripts['demo:cleanup'];
      writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
    }
    
    console.log('✅ Demo cleanup completed');
  }
};

const main = async () => {
  console.log('🤖 Carlos (Carlitos) - Automated Git Workflow Demo\n');
  
  const args = process.argv.slice(2);
  
  if (args.includes('--cleanup')) {
    await cleanupDemo();
    rl.close();
    return;
  }
  
  if (args.includes('--status')) {
    showWorkflowStatus();
    rl.close();
    return;
  }
  
  try {
    console.log('🎯 This demo will show the complete automated workflow:\n');
    console.log('   1. Create feature branch automatically');
    console.log('   2. Make sample changes');
    console.log('   3. Commit with conventional format');
    console.log('   4. Push to remote');
    console.log('   5. Create Pull Request with automation');
    console.log('   6. Trigger CI/CD pipeline\n');
    
    const proceed = await question('Start the demo? (y/n): ');
    
    if (proceed.toLowerCase() === 'y') {
      const branchName = await demonstrateWorkflow();
      
      console.log('\n🎓 Demo completed successfully!');
      console.log(`\n📋 To clean up later, run:`);
      console.log(`   npm run demo:cleanup`);
      console.log(`   git branch -D ${branchName}`);
    } else {
      console.log('Demo cancelled.');
    }
    
  } catch (error) {
    console.error('\n❌ Demo failed:', error.message);
  } finally {
    rl.close();
  }
};

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}
